/*
 * Copyright ¬© 2004-2023 L2J DataPack
 * 
 * This file is part of L2J DataPack.
 * 
 * L2J DataPack is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J DataPack is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.datapack.handlers.voicedcommandhandlers;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.items.L2Item;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;
import com.l2jserver.gameserver.model.items.type.CrystalType;
import com.l2jserver.gameserver.network.serverpackets.InventoryUpdate;
import com.l2jserver.gameserver.network.serverpackets.ItemList;
import com.l2jserver.gameserver.network.serverpackets.MagicSkillUse;
import com.l2jserver.gameserver.util.Broadcast;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ç–æ—á–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public class EnchantSystem {
    
    private static final Random RANDOM = new Random();
    
    /**
     * –¢–∏–ø—ã –∑–∞—Ç–æ—á–∫–∏
     */
    public enum EnchantType {
        WEAPON("weapon", "–û—Ä—É–∂–∏–µ", "‚öîÔ∏è"),
        ARMOR("armor", "–ë—Ä–æ–Ω—è", "üõ°Ô∏è"),
        JEWELRY("jewelry", "–£–∫—Ä–∞—à–µ–Ω–∏—è", "üíç");
        
        private final String key;
        private final String displayName;
        private final String icon;
        
        EnchantType(String key, String displayName, String icon) {
            this.key = key;
            this.displayName = displayName;
            this.icon = icon;
        }
        
        public String getKey() { return key; }
        public String getDisplayName() { return displayName; }
        public String getIcon() { return icon; }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ç–æ—á–∫–∏ –ø–æ –≥—Ä–µ–π–¥–∞–º
     */
    private static final Map<CrystalType, EnchantConfig> ENCHANT_CONFIGS = new HashMap<>();
    
    static {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–Ω—Å–æ–≤ –∑–∞—Ç–æ—á–∫–∏ –ø–æ –≥—Ä–µ–π–¥–∞–º
        ENCHANT_CONFIGS.put(CrystalType.NONE, new EnchantConfig(90, 80, 70, 100000));
        ENCHANT_CONFIGS.put(CrystalType.D, new EnchantConfig(80, 70, 60, 200000));
        ENCHANT_CONFIGS.put(CrystalType.C, new EnchantConfig(70, 60, 50, 500000));
        ENCHANT_CONFIGS.put(CrystalType.B, new EnchantConfig(60, 50, 40, 1000000));
        ENCHANT_CONFIGS.put(CrystalType.A, new EnchantConfig(50, 40, 30, 2000000));
        ENCHANT_CONFIGS.put(CrystalType.S, new EnchantConfig(40, 30, 20, 5000000));
        ENCHANT_CONFIGS.put(CrystalType.S80, new EnchantConfig(35, 25, 15, 10000000));
        ENCHANT_CONFIGS.put(CrystalType.S84, new EnchantConfig(30, 20, 10, 20000000));
    }
    
    /**
     * –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞—Ç–æ—á–∫–∏
     */
    private static class EnchantConfig {
        private final int safeChance;    // –®–∞–Ω—Å –¥–æ +3
        private final int normalChance;  // –®–∞–Ω—Å +4 –¥–æ +9
        private final int dangerChance;  // –®–∞–Ω—Å +10 –∏ –≤—ã—à–µ
        private final long baseCost;     // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        
        public EnchantConfig(int safeChance, int normalChance, int dangerChance, long baseCost) {
            this.safeChance = safeChance;
            this.normalChance = normalChance;
            this.dangerChance = dangerChance;
            this.baseCost = baseCost;
        }
        
        public int getSafeChance() { return safeChance; }
        public int getNormalChance() { return normalChance; }
        public int getDangerChance() { return dangerChance; }
        public long getBaseCost() { return baseCost; }
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—Ç–æ—á–∫–∏
     */
    public enum EnchantResult {
        SUCCESS("–£—Å–ø–µ—Ö! –ü—Ä–µ–¥–º–µ—Ç –∑–∞—Ç–æ—á–µ–Ω!", "‚úÖ", 2061),
        FAILURE("–ó–∞—Ç–æ—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!", "‚ùå", 2062),
        BREAK("–ü—Ä–µ–¥–º–µ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω!", "üí•", 2063),
        MAX_REACHED("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!", "‚≠ê", 2064);
        
        private final String message;
        private final String icon;
        private final int effectSkillId;
        
        EnchantResult(String message, String icon, int effectSkillId) {
            this.message = message;
            this.icon = icon;
            this.effectSkillId = effectSkillId;
        }
        
        public String getMessage() { return message; }
        public String getIcon() { return icon; }
        public int getEffectSkillId() { return effectSkillId; }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞—Ç–æ—á–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    public static EnchantResult enchantItem(L2PcInstance player, L2ItemInstance item, int targetLevel, boolean safeEnchant) {
        if (item == null || !item.isEquipped()) {
            return EnchantResult.FAILURE;
        }
        
        int currentEnchant = item.getEnchantLevel();
        int maxEnchant = getMaxEnchantLevel(item);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if (currentEnchant >= maxEnchant) {
            return EnchantResult.MAX_REACHED;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        long cost = calculateEnchantCost(item, targetLevel, safeEnchant);
        if (player.getAdena() < cost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + cost);
            return EnchantResult.FAILURE;
        }
        
        // –°–Ω–∏–º–∞–µ–º –∞–¥–µ–Ω—É
        player.reduceAdena("Enchant", cost, null, true);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—Ç–æ—á–∫—É
        boolean success = performEnchant(item, targetLevel, safeEnchant);
        
        if (success) {
            item.setEnchantLevel(Math.min(currentEnchant + targetLevel, maxEnchant));
            updatePlayerInventory(player, item);
            playEnchantEffect(player, EnchantResult.SUCCESS);
            return EnchantResult.SUCCESS;
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–æ–º–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
            if (!safeEnchant && shouldItemBreak(item)) {
                // –†–∞–∑—Ä—É—à–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                player.getInventory().destroyItem("Enchant Break", item, player, null);
                updatePlayerInventory(player, null);
                playEnchantEffect(player, EnchantResult.BREAK);
                return EnchantResult.BREAK;
            } else {
                playEnchantEffect(player, EnchantResult.FAILURE);
                return EnchantResult.FAILURE;
            }
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –∑–∞—Ç–æ—á–∫–∏
     */
    private static boolean performEnchant(L2ItemInstance item, int targetLevel, boolean safeEnchant) {
        CrystalType grade = item.getItem().getCrystalType();
        EnchantConfig config = ENCHANT_CONFIGS.get(grade);
        
        if (config == null) {
            config = ENCHANT_CONFIGS.get(CrystalType.NONE);
        }
        
        int currentEnchant = item.getEnchantLevel();
        int chance;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—Ç–æ—á–∫–∏
        if (currentEnchant < 3) {
            chance = config.getSafeChance();
        } else if (currentEnchant < 9) {
            chance = config.getNormalChance();
        } else {
            chance = config.getDangerChance();
        }
        
        // –ë–æ–Ω—É—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞—Ç–æ—á–∫–∏
        if (safeEnchant) {
            chance += 20;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—Ç–æ—á–∫–∏
        if (targetLevel > 1) {
            chance = (int)(chance * Math.pow(0.8, targetLevel - 1));
        }
        
        return RANDOM.nextInt(100) < chance;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è
     */
    private static boolean shouldItemBreak(L2ItemInstance item) {
        int currentEnchant = item.getEnchantLevel();
        
        // –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ +3 –Ω–µ –ª–æ–º–∞—é—Ç—Å—è
        if (currentEnchant < 3) {
            return false;
        }
        
        // –®–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É—Ä–æ–≤–Ω–µ–º –∑–∞—Ç–æ—á–∫–∏
        int breakChance = Math.max(5, (currentEnchant - 2) * 10);
        return RANDOM.nextInt(100) < breakChance;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ç–æ—á–∫–∏
     */
    public static long calculateEnchantCost(L2ItemInstance item, int levels, boolean safeEnchant) {
        CrystalType grade = item.getItem().getCrystalType();
        EnchantConfig config = ENCHANT_CONFIGS.get(grade);
        
        if (config == null) {
            config = ENCHANT_CONFIGS.get(CrystalType.NONE);
        }
        
        long baseCost = config.getBaseCost();
        int currentEnchant = item.getEnchantLevel();
        
        // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å * —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
        long cost = baseCost * (currentEnchant + 1) * levels;
        
        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞—Ç–æ—á–∫–∏
        if (safeEnchant) {
            cost *= 3;
        }
        
        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        if (currentEnchant >= 10) {
            cost *= 2;
        }
        
        return cost;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    private static int getMaxEnchantLevel(L2ItemInstance item) {
        if (item.getItem().getType2() == L2Item.TYPE2_WEAPON) {
            return 25; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –æ—Ä—É–∂–∏—è
        } else {
            return 20; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –±—Ä–æ–Ω–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
     */
    private static void updatePlayerInventory(L2PcInstance player, L2ItemInstance item) {
        if (item != null) {
            InventoryUpdate iu = new InventoryUpdate();
            iu.addModifiedItem(item);
            player.sendPacket(iu);
        }
        player.sendPacket(new ItemList(player, false));
        player.broadcastUserInfo();
    }
    
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑–∞—Ç–æ—á–∫–∏
     */
    private static void playEnchantEffect(L2PcInstance player, EnchantResult result) {
        MagicSkillUse msu = new MagicSkillUse(player, player, result.getEffectSkillId(), 1, 1, 0);
        Broadcast.toSelfAndKnownPlayersInRadius(player, msu, 600);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    public static L2ItemInstance[] getEquippedItems(L2PcInstance player, EnchantType type) {
        switch (type) {
            case WEAPON:
                L2ItemInstance weapon = player.getActiveWeaponInstance();
                return weapon != null ? new L2ItemInstance[]{weapon} : new L2ItemInstance[0];
                
            case ARMOR:
                return player.getInventory().getItems().stream()
                    .filter(item -> item.isEquipped() && 
                           item.getItem().getBodyPart() != L2Item.SLOT_R_HAND &&
                           item.getItem().getBodyPart() != L2Item.SLOT_L_HAND &&
                           item.getItem().getBodyPart() != L2Item.SLOT_LR_HAND &&
                           item.getItem().getBodyPart() != L2Item.SLOT_R_EAR &&
                           item.getItem().getBodyPart() != L2Item.SLOT_L_EAR &&
                           item.getItem().getBodyPart() != L2Item.SLOT_NECK &&
                           item.getItem().getBodyPart() != L2Item.SLOT_R_FINGER &&
                           item.getItem().getBodyPart() != L2Item.SLOT_L_FINGER)
                    .toArray(L2ItemInstance[]::new);
                    
            case JEWELRY:
                return player.getInventory().getItems().stream()
                    .filter(item -> item.isEquipped() && 
                           (item.getItem().getBodyPart() == L2Item.SLOT_R_EAR ||
                            item.getItem().getBodyPart() == L2Item.SLOT_L_EAR ||
                            item.getItem().getBodyPart() == L2Item.SLOT_NECK ||
                            item.getItem().getBodyPart() == L2Item.SLOT_R_FINGER ||
                            item.getItem().getBodyPart() == L2Item.SLOT_L_FINGER))
                    .toArray(L2ItemInstance[]::new);
                    
            default:
                return new L2ItemInstance[0];
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    public static String generateItemDisplay(L2ItemInstance item) {
        if (item == null) {
            return "<font color=\"AAAAAA\">–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω</font>";
        }
        
        StringBuilder html = new StringBuilder();
        html.append("<table width=\"100%\" bgcolor=\"111111\">");
        html.append("<tr>");
        html.append("<td width=\"200\">").append(item.getName());
        
        if (item.getEnchantLevel() > 0) {
            html.append(" <font color=\"LEVEL\">+").append(item.getEnchantLevel()).append("</font>");
        }
        
        html.append("</td>");
        html.append("<td width=\"80\">").append(item.getItem().getCrystalType().toString()).append("</td>");
        html.append("</tr>");
        html.append("</table>");
        
        return html.toString();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static String getEnchantCostInfo(L2ItemInstance item, int levels, boolean safeEnchant) {
        if (item == null) {
            return "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω";
        }
        
        long cost = calculateEnchantCost(item, levels, safeEnchant);
        String type = safeEnchant ? "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è" : "–û–±—ã—á–Ω–∞—è";
        
        return String.format("%s –∑–∞—Ç–æ—á–∫–∞ –Ω–∞ +%d: %,d –∞–¥–µ–Ω—ã", type, levels, cost);
    }
}