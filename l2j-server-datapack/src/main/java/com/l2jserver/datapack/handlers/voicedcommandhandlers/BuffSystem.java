/*
 * Copyright ¬© 2004-2023 L2J DataPack
 * 
 * This file is part of L2J DataPack.
 * 
 * L2J DataPack is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J DataPack is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.datapack.handlers.voicedcommandhandlers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.l2jserver.gameserver.data.xml.impl.SkillInfoData;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.holders.SkillHolder;
import com.l2jserver.gameserver.model.skills.Skill;
import com.l2jserver.gameserver.network.serverpackets.MagicSkillUse;
import com.l2jserver.gameserver.util.Broadcast;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public class BuffSystem {
    
    /**
     * –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∞—Ñ–æ–≤
     */
    public enum BuffCategory {
        DEFENSE("defense", "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ", "–ë–∞—Ñ—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è"),
        ATTACK("attack", "‚öîÔ∏è –ë–æ–µ–≤—ã–µ", "–ë–∞—Ñ—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞"),
        SPEED("speed", "üèÉ –°–∫–æ—Ä–æ—Å—Ç—å", "–ë–∞—Ñ—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏"),
        MAGIC("magic", "üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ", "–ë–∞—Ñ—ã –¥–ª—è –º–∞–≥–æ–≤"),
        SPECIAL("special", "‚ú® –û—Å–æ–±—ã–µ", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞—Ñ—ã"),
        CLAN("clan", "üë• –ö–ª–∞–Ω–æ–≤—ã–µ", "–ë–∞—Ñ—ã –¥–ª—è –∫–ª–∞–Ω–∞"),
        RESIST("resist", "üî∞ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è", "–ë–∞—Ñ—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ–∞–º");
        
        private final String key;
        private final String displayName;
        private final String description;
        
        BuffCategory(String key, String displayName, String description) {
            this.key = key;
            this.displayName = displayName;
            this.description = description;
        }
        
        public String getKey() { return key; }
        public String getDisplayName() { return displayName; }
        public String getDescription() { return description; }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∞—Ñ–∞
     */
    public static class BuffInfo {
        private final SkillHolder skill;
        private final String name;
        private final String description;
        private final BuffCategory category;
        private final int cost;
        private final int requiredLevel;
        private final boolean isPremium;
        
        public BuffInfo(int skillId, int skillLevel, String name, String description, 
                       BuffCategory category, int cost, int requiredLevel, boolean isPremium) {
            this.skill = new SkillHolder(skillId, skillLevel);
            this.name = name;
            this.description = description;
            this.category = category;
            this.cost = cost;
            this.requiredLevel = requiredLevel;
            this.isPremium = isPremium;
        }
        
        public SkillHolder getSkill() { return skill; }
        public String getName() { return name; }
        public String getDescription() { return description; }
        public BuffCategory getCategory() { return category; }
        public int getCost() { return cost; }
        public int getRequiredLevel() { return requiredLevel; }
        public boolean isPremium() { return isPremium; }
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ñ–æ–≤
    private static final Map<BuffCategory, List<BuffInfo>> BUFF_CONFIG = new HashMap<>();
    
    static {
        initializeBuffs();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤
     */
    private static void initializeBuffs() {
        
        // === –ó–ê–©–ò–¢–ù–´–ï –ë–ê–§–´ ===
        List<BuffInfo> defenseBuffs = new ArrayList<>();
        defenseBuffs.add(new BuffInfo(1040, 3, "Shield", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç P.Def", BuffCategory.DEFENSE, 50000, 1, false));
        defenseBuffs.add(new BuffInfo(1045, 6, "Blessed Body", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º HP", BuffCategory.DEFENSE, 75000, 1, false));
        defenseBuffs.add(new BuffInfo(1048, 6, "Blessed Soul", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º MP", BuffCategory.DEFENSE, 75000, 1, false));
        defenseBuffs.add(new BuffInfo(1036, 2, "Magic Barrier", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç M.Def", BuffCategory.DEFENSE, 60000, 1, false));
        defenseBuffs.add(new BuffInfo(1035, 4, "Mental Shield", "–ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫", BuffCategory.DEFENSE, 40000, 1, false));
        defenseBuffs.add(new BuffInfo(1259, 4, "Resist Shock", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —à–æ–∫—É", BuffCategory.DEFENSE, 80000, 25, false));
        defenseBuffs.add(new BuffInfo(1352, 1, "Elemental Protection", "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∏—Ö–∏–π", BuffCategory.DEFENSE, 100000, 40, true));
        BUFF_CONFIG.put(BuffCategory.DEFENSE, defenseBuffs);
        
        // === –ë–û–ï–í–´–ï –ë–ê–§–´ ===
        List<BuffInfo> attackBuffs = new ArrayList<>();
        attackBuffs.add(new BuffInfo(1068, 3, "Might", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç P.Atk", BuffCategory.ATTACK, 50000, 1, false));
        attackBuffs.add(new BuffInfo(1062, 2, "Berserker Spirit", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç P.Atk –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", BuffCategory.ATTACK, 70000, 1, false));
        attackBuffs.add(new BuffInfo(1077, 3, "Focus", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–Ω—Å", BuffCategory.ATTACK, 60000, 1, false));
        attackBuffs.add(new BuffInfo(1242, 3, "Death Whisper", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω", BuffCategory.ATTACK, 80000, 20, false));
        attackBuffs.add(new BuffInfo(1388, 3, "Greater Might", "–°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç P.Atk", BuffCategory.ATTACK, 150000, 52, true));
        attackBuffs.add(new BuffInfo(1087, 2, "Agility", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å", BuffCategory.ATTACK, 45000, 1, false));
        attackBuffs.add(new BuffInfo(1397, 3, "Clarity", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–Ω—Å –º–∞–≥–∏–∏", BuffCategory.ATTACK, 90000, 30, false));
        BUFF_CONFIG.put(BuffCategory.ATTACK, attackBuffs);
        
        // === –ë–ê–§–´ –°–ö–û–†–û–°–¢–ò ===
        List<BuffInfo> speedBuffs = new ArrayList<>();
        speedBuffs.add(new BuffInfo(1086, 2, "Haste", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", BuffCategory.SPEED, 40000, 1, false));
        speedBuffs.add(new BuffInfo(1204, 2, "Wind Walk", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è", BuffCategory.SPEED, 60000, 1, false));
        speedBuffs.add(new BuffInfo(1007, 3, "Acrobatics", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ª–æ–≤–∫–æ—Å—Ç—å", BuffCategory.SPEED, 80000, 20, false));
        speedBuffs.add(new BuffInfo(1389, 3, "Greater Shield", "–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞", BuffCategory.SPEED, 120000, 52, true));
        BUFF_CONFIG.put(BuffCategory.SPEED, speedBuffs);
        
        // === –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ë–ê–§–´ ===
        List<BuffInfo> magicBuffs = new ArrayList<>();
        magicBuffs.add(new BuffInfo(1085, 3, "Acumen", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞—Å—Ç–∞", BuffCategory.MAGIC, 50000, 1, false));
        magicBuffs.add(new BuffInfo(1059, 3, "Empower", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç M.Atk", BuffCategory.MAGIC, 55000, 1, false));
        magicBuffs.add(new BuffInfo(1078, 6, "Concentration", "–£–º–µ–Ω—å—à–∞–µ—Ç –≤—Ä–µ–º—è –∫–∞—Å—Ç–∞", BuffCategory.MAGIC, 70000, 1, false));
        magicBuffs.add(new BuffInfo(1397, 3, "Clarity", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–Ω—Å –º–∞–≥–∏–∏", BuffCategory.MAGIC, 90000, 30, false));
        magicBuffs.add(new BuffInfo(1413, 1, "Magnus' Chant", "–ú–æ—â–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ñ", BuffCategory.MAGIC, 200000, 56, true));
        magicBuffs.add(new BuffInfo(1303, 2, "Wild Magic", "–î–∏–∫–∞—è –º–∞–≥–∏—è", BuffCategory.MAGIC, 150000, 44, true));
        BUFF_CONFIG.put(BuffCategory.MAGIC, magicBuffs);
        
        // === –û–°–û–ë–´–ï –ë–ê–§–´ ===
        List<BuffInfo> specialBuffs = new ArrayList<>();
        specialBuffs.add(new BuffInfo(1354, 1, "Vampiric Rage", "–í–∞–º–ø–∏—Ä—Å–∫–∞—è —è—Ä–æ—Å—Ç—å", BuffCategory.SPECIAL, 250000, 62, true));
        specialBuffs.add(new BuffInfo(1355, 1, "Reflect Damage", "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞", BuffCategory.SPECIAL, 200000, 58, true));
        specialBuffs.add(new BuffInfo(1356, 1, "Blessing of Queen", "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—ã", BuffCategory.SPECIAL, 300000, 65, true));
        specialBuffs.add(new BuffInfo(1357, 1, "Gift of Queen", "–î–∞—Ä –∫–æ—Ä–æ–ª–µ–≤—ã", BuffCategory.SPECIAL, 350000, 68, true));
        specialBuffs.add(new BuffInfo(1363, 1, "Chant of Victory", "–ü–µ—Å–Ω—å –ø–æ–±–µ–¥—ã", BuffCategory.SPECIAL, 400000, 70, true));
        specialBuffs.add(new BuffInfo(1499, 1, "Improved Combat", "–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ–π", BuffCategory.SPECIAL, 180000, 50, true));
        BUFF_CONFIG.put(BuffCategory.SPECIAL, specialBuffs);
        
        // === –ö–õ–ê–ù–û–í–´–ï –ë–ê–§–´ ===
        List<BuffInfo> clanBuffs = new ArrayList<>();
        clanBuffs.add(new BuffInfo(1364, 1, "Chant of Eagle", "–ü–µ—Å–Ω—å –æ—Ä–ª–∞", BuffCategory.CLAN, 150000, 40, false));
        clanBuffs.add(new BuffInfo(1365, 1, "Chant of Predator", "–ü–µ—Å–Ω—å —Ö–∏—â–Ω–∏–∫–∞", BuffCategory.CLAN, 150000, 40, false));
        clanBuffs.add(new BuffInfo(1390, 3, "War Chant", "–ë–æ–µ–≤–∞—è –ø–µ—Å–Ω—å", BuffCategory.CLAN, 200000, 55, true));
        clanBuffs.add(new BuffInfo(1391, 3, "Earth Chant", "–ü–µ—Å–Ω—å –∑–µ–º–ª–∏", BuffCategory.CLAN, 200000, 55, true));
        clanBuffs.add(new BuffInfo(1392, 3, "Flame Chant", "–ü–µ—Å–Ω—å –ø–ª–∞–º–µ–Ω–∏", BuffCategory.CLAN, 200000, 55, true));
        clanBuffs.add(new BuffInfo(1393, 3, "Storm Chant", "–ü–µ—Å–Ω—å –±—É—Ä–∏", BuffCategory.CLAN, 200000, 55, true));
        BUFF_CONFIG.put(BuffCategory.CLAN, clanBuffs);
        
        // === –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø ===
        List<BuffInfo> resistBuffs = new ArrayList<>();
        resistBuffs.add(new BuffInfo(1032, 3, "Invigor", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–µ–±–∞—Ñ–∞–º", BuffCategory.RESIST, 80000, 25, false));
        resistBuffs.add(new BuffInfo(1033, 3, "Flexibility", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏—é", BuffCategory.RESIST, 70000, 20, false));
        resistBuffs.add(new BuffInfo(1259, 4, "Resist Shock", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —à–æ–∫—É", BuffCategory.RESIST, 90000, 30, false));
        resistBuffs.add(new BuffInfo(1352, 1, "Elemental Protection", "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∏—Ö–∏–π", BuffCategory.RESIST, 120000, 40, true));
        resistBuffs.add(new BuffInfo(1461, 1, "Resist Aqua", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–æ–¥–µ", BuffCategory.RESIST, 60000, 25, false));
        resistBuffs.add(new BuffInfo(1462, 1, "Resist Wind", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä—É", BuffCategory.RESIST, 60000, 25, false));
        BUFF_CONFIG.put(BuffCategory.RESIST, resistBuffs);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–∞—Ñ—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public static List<BuffInfo> getBuffsByCategory(BuffCategory category) {
        return BUFF_CONFIG.getOrDefault(category, new ArrayList<>());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public static BuffCategory[] getCategories() {
        return BuffCategory.values();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ –∏–≥—Ä–æ–∫—É
     */
    public static boolean applyBuff(L2PcInstance player, BuffInfo buffInfo) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        if (player.getLevel() < buffInfo.getRequiredLevel()) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢—Ä–µ–±—É–µ—Ç—Å—è: " + buffInfo.getRequiredLevel());
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –±–∞—Ñ–æ–≤
        if (buffInfo.isPremium() && !isPremiumPlayer(player)) {
            player.sendMessage("–≠—Ç–æ—Ç –±–∞—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP –∏–≥—Ä–æ–∫–∞–º!");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–Ω—ã
        if (player.getAdena() < buffInfo.getCost()) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + buffInfo.getCost());
            return false;
        }
        
        // –°–Ω–∏–º–∞–µ–º –∞–¥–µ–Ω—É
        player.reduceAdena("Buff", buffInfo.getCost(), null, true);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ
        Skill skill = SkillData.getInstance().getSkill(buffInfo.getSkill().getSkillId(), buffInfo.getSkill().getSkillLvl());
        if (skill != null) {
            skill.applyEffects(player, player);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–∞
            MagicSkillUse msu = new MagicSkillUse(player, player, buffInfo.getSkill().getSkillId(), 
                                                buffInfo.getSkill().getSkillLvl(), 1, 0);
            Broadcast.toSelfAndKnownPlayersInRadius(player, msu, 600);
            
            player.sendMessage("–ü–æ–ª—É—á–µ–Ω –±–∞—Ñ: " + buffInfo.getName());
            return true;
        }
        
        return false;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –±–∞—Ñ—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public static int applyCategoryBuffs(L2PcInstance player, BuffCategory category) {
        List<BuffInfo> buffs = getBuffsByCategory(category);
        int appliedCount = 0;
        long totalCost = 0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        for (BuffInfo buff : buffs) {
            if (player.getLevel() >= buff.getRequiredLevel() && 
                (!buff.isPremium() || isPremiumPlayer(player))) {
                totalCost += buff.getCost();
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if (player.getAdena() < totalCost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + totalCost);
            return 0;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã
        for (BuffInfo buff : buffs) {
            if (player.getLevel() >= buff.getRequiredLevel() && 
                (!buff.isPremium() || isPremiumPlayer(player))) {
                
                player.reduceAdena("CategoryBuffs", buff.getCost(), null, true);
                
                Skill skill = SkillData.getInstance().getSkill(buff.getSkill().getSkillId(), buff.getSkill().getSkillLvl());
                if (skill != null) {
                    skill.applyEffects(player, player);
                    appliedCount++;
                }
            }
        }
        
        if (appliedCount > 0) {
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
            MagicSkillUse msu = new MagicSkillUse(player, player, 2024, 1, 1, 0);
            Broadcast.toSelfAndKnownPlayersInRadius(player, msu, 600);
            
            player.sendMessage("–ü–æ–ª—É—á–µ–Ω–æ –±–∞—Ñ–æ–≤: " + appliedCount + " (" + category.getDisplayName() + ")");
        }
        
        return appliedCount;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ñ—ã
     */
    public static int applyAllBuffs(L2PcInstance player) {
        int totalApplied = 0;
        long totalCost = 0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ñ–æ–≤
        for (BuffCategory category : BuffCategory.values()) {
            for (BuffInfo buff : getBuffsByCategory(category)) {
                if (player.getLevel() >= buff.getRequiredLevel() && 
                    (!buff.isPremium() || isPremiumPlayer(player))) {
                    totalCost += buff.getCost();
                }
            }
        }
        
        // –°–∫–∏–¥–∫–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤—Å–µ—Ö –±–∞—Ñ–æ–≤ —Å—Ä–∞–∑—É
        totalCost = (long)(totalCost * 0.8); // 20% —Å–∫–∏–¥–∫–∞
        
        if (player.getAdena() < totalCost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + totalCost);
            return 0;
        }
        
        // –°–Ω–∏–º–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        player.reduceAdena("AllBuffs", totalCost, null, true);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ñ—ã
        for (BuffCategory category : BuffCategory.values()) {
            for (BuffInfo buff : getBuffsByCategory(category)) {
                if (player.getLevel() >= buff.getRequiredLevel() && 
                    (!buff.isPremium() || isPremiumPlayer(player))) {
                    
                    Skill skill = SkillData.getInstance().getSkill(buff.getSkill().getSkillId(), buff.getSkill().getSkillLvl());
                    if (skill != null) {
                        skill.applyEffects(player, player);
                        totalApplied++;
                    }
                }
            }
        }
        
        if (totalApplied > 0) {
            // –ú–æ—â–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤
            MagicSkillUse msu = new MagicSkillUse(player, player, 2025, 1, 1, 0);
            Broadcast.toSelfAndKnownPlayersInRadius(player, msu, 600);
            
            player.sendMessage("‚ú® –ü–æ–ª—É—á–µ–Ω—ã –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ñ—ã: " + totalApplied + " —à—Ç! (—Å–∫–∏–¥–∫–∞ 20%)");
        }
        
        return totalApplied;
    }
    
    /**
     * –°–Ω–∏–º–∞–µ—Ç –≤—Å–µ –±–∞—Ñ—ã —Å –∏–≥—Ä–æ–∫–∞
     */
    public static void removeAllBuffs(L2PcInstance player) {
        player.stopAllEffectsExceptThoseThatLastThroughDeath();
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–Ω—è—Ç–∏—è –±–∞—Ñ–æ–≤
        MagicSkillUse msu = new MagicSkillUse(player, player, 2026, 1, 1, 0);
        Broadcast.toSelfAndKnownPlayersInRadius(player, msu, 600);
        
        player.sendMessage("üóëÔ∏è –í—Å–µ –±–∞—Ñ—ã —Å–Ω—è—Ç—ã!");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º
     */
    private static boolean isPremiumPlayer(L2PcInstance player) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ VIP —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–≤–æ—Ä—è–Ω—Å—Ç–≤–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
        return player.isNoble() || (player.getClan() != null && player.getClan().getLevel() >= 8);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –±–∞—Ñ–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public static long getCategoryCost(L2PcInstance player, BuffCategory category) {
        long totalCost = 0;
        
        for (BuffInfo buff : getBuffsByCategory(category)) {
            if (player.getLevel() >= buff.getRequiredLevel() && 
                (!buff.isPremium() || isPremiumPlayer(player))) {
                totalCost += buff.getCost();
            }
        }
        
        return totalCost;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ñ–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public static int getAvailableBuffsCount(L2PcInstance player, BuffCategory category) {
        int count = 0;
        
        for (BuffInfo buff : getBuffsByCategory(category)) {
            if (player.getLevel() >= buff.getRequiredLevel() && 
                (!buff.isPremium() || isPremiumPlayer(player))) {
                count++;
            }
        }
        
        return count;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ñ–∞
     */
    public static String generateBuffDisplay(BuffInfo buff, L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        boolean available = player.getLevel() >= buff.getRequiredLevel() && 
                          (!buff.isPremium() || isPremiumPlayer(player));
        
        html.append("<table width=\"100%\" bgcolor=\"").append(available ? "111111" : "333333").append("\">");
        html.append("<tr>");
        html.append("<td width=\"150\">").append(buff.getName());
        
        if (buff.isPremium()) {
            html.append(" <font color=\"LEVEL\">[VIP]</font>");
        }
        
        html.append("</td>");
        html.append("<td width=\"80\">").append(buff.getCost()).append(" a</td>");
        html.append("<td width=\"50\">");
        
        if (available) {
            html.append("<button value=\"–ü–æ–ª—É—á–∏—Ç—å\" action=\"bypass -h voice .buffs apply ")
                .append(buff.getSkill().getSkillId()).append("\" width=\"50\" height=\"20\" ")
                .append("back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        } else {
            html.append("<font color=\"777777\">–£—Ä.").append(buff.getRequiredLevel()).append("</font>");
        }
        
        html.append("</td>");
        html.append("</tr>");
        html.append("</table>");
        
        return html.toString();
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–∞—Ñ –ø–æ ID —Å–∫–∏–ª–ª–∞
     */
    public static BuffInfo findBuffBySkillId(int skillId) {
        for (List<BuffInfo> buffs : BUFF_CONFIG.values()) {
            for (BuffInfo buff : buffs) {
                if (buff.getSkill().getSkillId() == skillId) {
                    return buff;
                }
            }
        }
        return null;
    }
}