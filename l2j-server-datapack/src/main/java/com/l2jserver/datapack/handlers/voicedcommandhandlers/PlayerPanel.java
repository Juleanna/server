/**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
     */
    private void sendHtmlMessage(L2PcInstance player, String html) {
        NpcHtmlMessage msg = new NpcHtmlMessage();
        msg.setHtml(html);
        player.sendPacket(msg);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private void handleShopAction(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            showShopPanel(player);
            return;
        }
        
        String subAction = st.nextToken().toLowerCase();
        
        switch (subAction) {
            case "category":
                if (st.hasMoreTokens()) {
                    showShopCategory(player, st.nextToken());
                } else {
                    showShopPanel(player);
                }
                break;
            case "buy":
                handlePurchase(player, st);
                break;
            default:
                showShopCategory(player, subAction);
                break;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private void showShopPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ú–∞–≥–∞–∑–∏–Ω –∏–≥—Ä–æ–∫–∞</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">üõí –ú–ê–ì–ê–ó–ò–ù –ò–ì–†–û–ö–ê üõí</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        html.append("<table width=\"320\">");
        String[] categories = ShopConfig.getCategories();
        
        for (int i = 0; i < categories.length; i += 2) {
            html.append("<tr>");
            
            // –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
            String cat1 = categories[i];
            String displayName1 = ShopConfig.getCategoryDisplayName(cat1);
            html.append("<td><button value=\"").append(displayName1).append("\" action=\"bypass -h voice .panel shop ").append(cat1).append("\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
            
            // –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (i + 1 < categories.length) {
                String cat2 = categories[i + 1];
                String displayName2 = ShopConfig.getCategoryDisplayName(cat2);
                html.append("<td><button value=\"").append(displayName2).append("\" action=\"bypass -h voice .panel shop ").append(cat2).append("\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
            } else {
                html.append("<td></td>");
            }
            
            html.append("</tr>");
        }
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö
        html.append("<table width=\"320\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí∞ –î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∏–¥–∫–∏</font></td></tr>");
        
        if (player.getLevel() <= 20) {
            html.append("<tr><td>–°–∫–∏–¥–∫–∞ –Ω–æ–≤–∏—á–∫–∞:</td><td align=\"right\"><font color=\"66FF66\">-20%</font></td></tr>");
        }
        
        if (player.isNoble()) {
            html.append("<tr><td>–°–∫–∏–¥–∫–∞ –¥–≤–æ—Ä—è–Ω–∏–Ω–∞:</td><td align=\"right\"><font color=\"66FF66\">-10%</font></td></tr>");
        }
        
        if (player.getClan() != null && player.getClan().getLevel() >= 5) {
            html.append("<tr><td>–ö–ª–∞–Ω–æ–≤–∞—è —Å–∫–∏–¥–∫–∞:</td><td align=\"right\"><font color=\"66FF66\">-5%</font></td></tr>");
        }
        
        html.append("</table><br>");
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ç–æ—á–∫–∏ —É–∫—Ä–∞—à–µ–Ω–∏–π
     */
    private void handleJewelryEnchant(L2PcInstance player, StringTokenizer st) {
        L2ItemInstance[] jewelryItems = EnchantSystem.getEquippedItems(player, EnchantSystem.EnchantType.JEWELRY);
        
        if (jewelryItems.length == 0) {
            player.sendMessage("‚ùå –£–∫—Ä–∞—à–µ–Ω–∏—è –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω—ã!");
            showEnchantPanel(player);
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è
        showJewelrySelectionPanel(player, jewelryItems);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —É–∫—Ä–∞—à–µ–Ω–∏–π –¥–ª—è –∑–∞—Ç–æ—á–∫–∏
     */
    private void showJewelrySelectionPanel(L2PcInstance player, L2ItemInstance[] jewelryItems) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ó–∞—Ç–æ—á–∫–∞ —É–∫—Ä–∞—à–µ–Ω–∏–π</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">üíç –ó–ê–¢–û–ß–ö–ê –£–ö–†–ê–®–ï–ù–ò–ô üíç</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        html.append("–í—ã–±–µ—Ä–∏—Ç–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ç–æ—á–∫–∏:<br><br>");
        
        for (int i = 0; i < jewelryItems.length; i++) {
            L2ItemInstance item = jewelryItems[i];
            long cost = EnchantSystem.calculateEnchantCost(item, 1, false);
            
            html.append("<table width=\"320\" bgcolor=\"111111\">");
            html.append("<tr>");
            html.append("<td width=\"200\">").append(item.getName());
            if (item.getEnchantLevel() > 0) {
                html.append(" <font color=\"LEVEL\">+").append(item.getEnchantLevel()).append("</font>");
            }
            html.append("</td>");
            html.append("<td width=\"120\">");
            html.append("<button value=\"–ó–∞—Ç–æ—á–∏—Ç—å\" action=\"bypass -h voice .panel enchant jewelry_item ").append(item.getObjectId()).append("\" width=\"80\" height=\"20\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
            html.append("</td>");
            html.append("</tr>");
            html.append("<tr>");
            html.append("<td colspan=\"2\" align=\"center\"><font color=\"AAAAAA\">–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(String.format("%,d", cost)).append(" –∞–¥–µ–Ω—ã</font></td>");
            html.append("</tr>");
            html.append("</table><br>");
        }
        
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—Ç–æ—á–∫–µ\" action=\"bypass -h voice .panel enchant\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    @Override
    public String[] getVoicedCommandList() {
        return VOICED_COMMANDS;
    }
    
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
     */
    public static void clearCache() {
        LAST_USAGE.clear();
        USAGE_STATS.clear();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
     */
    public static Map<Integer, Integer> getUsageStats() {
        return new HashMap<>(USAGE_STATS);
    }
}</body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private void showShopCategory(L2PcInstance player, String category) {
        List<ShopConfig.ShopItem> items = ShopConfig.getCategoryItems(category);
        
        if (items.isEmpty()) {
            player.sendMessage("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            showShopPanel(player);
            return;
        }
        
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ú–∞–≥–∞–∑–∏–Ω - ").append(ShopConfig.getCategoryDisplayName(category)).append("</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">").append(ShopConfig.getCategoryDisplayName(category)).append("</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        // –¢–æ–≤–∞—Ä—ã
        html.append("<table width=\"320\">");
        html.append("<tr bgcolor=\"333333\">");
        html.append("<td width=\"180\" align=\"center\"><font color=\"LEVEL\">–¢–æ–≤–∞—Ä</font></td>");
        html.append("<td width=\"70\" align=\"center\"><font color=\"LEVEL\">–¶–µ–Ω–∞</font></td>");
        html.append("<td width=\"70\" align=\"center\"><font color=\"LEVEL\">–î–µ–π—Å—Ç–≤–∏–µ</font></td>");
        html.append("</tr>");
        
        for (ShopConfig.ShopItem item : items) {
            if (!ShopConfig.isItemAvailable(item.getItemId(), player)) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            }
            
            long modifiedPrice = ShopConfig.getModifiedPrice(item, player);
            
            html.append("<tr bgcolor=\"111111\">");
            html.append("<td>").append(item.getIcon()).append(" ").append(item.getName());
            
            if (item.getCount() > 1) {
                html.append(" (").append(item.getCount()).append(" —à—Ç)");
            }
            
            html.append("</td>");
            html.append("<td align=\"center\">");
            
            if (modifiedPrice != item.getPrice()) {
                html.append("<s>").append(String.format("%,d", item.getPrice())).append("</s><br>");
                html.append("<font color=\"66FF66\">").append(String.format("%,d", modifiedPrice)).append("</font>");
            } else {
                html.append(String.format("%,d", modifiedPrice));
            }
            
            html.append("</td>");
            html.append("<td align=\"center\">");
            html.append("<button value=\"–ö—É–ø–∏—Ç—å\" action=\"bypass -h voice .panel shop buy ").append(item.getItemId()).append(" ").append(item.getCount()).append("\" width=\"60\" height=\"20\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
            html.append("</td>");
            html.append("</tr>");
        }
        
        html.append("</table><br>");
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        html.append("<table width=\"320\">");
        html.append("<tr>");
        html.append("<td><button value=\"‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\" action=\"bypass -h voice .panel shop\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table>");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
     */
    private void handlePurchase(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            player.sendMessage("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–æ–≤–∞—Ä–∞!");
            return;
        }
        
        try {
            int itemId = Integer.parseInt(st.nextToken());
            int count = 1;
            
            if (st.hasMoreTokens()) {
                count = Integer.parseInt(st.nextToken());
            }
            
            ShopConfig.ShopItem item = ShopConfig.findItem(itemId);
            if (item == null) {
                player.sendMessage("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            if (!ShopConfig.isItemAvailable(itemId, player)) {
                player.sendMessage("‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è!");
                return;
            }
            
            long totalCost = ShopConfig.getModifiedPrice(item, player) * (count / item.getCount());
            
            if (player.getAdena() < totalCost) {
                player.sendMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + String.format("%,d", totalCost));
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            if (player.getInventory().getSize() >= player.getInventoryLimit() - 10) {
                player.sendMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
                return;
            }
            
            // –ü–æ–∫—É–ø–∫–∞
            player.reduceAdena("ShopPurchase", totalCost, null, true);
            player.addItem("ShopPurchase", itemId, count, null, true);
            
            player.sendMessage("‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞: " + item.getName() + " x" + count + " –∑–∞ " + String.format("%,d", totalCost) + " –∞–¥–µ–Ω—ã!");
            
        } catch (NumberFormatException e) {
            player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
     */
    private void handleTeleportAction(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            showTeleportPanel(player);
            return;
        }
        
        try {
            int locationIndex = Integer.parseInt(st.nextToken());
            performTeleport(player, locationIndex);
        } catch (NumberFormatException e) {
            player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ª–æ–∫–∞—Ü–∏–∏!");
            showTeleportPanel(player);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
     */
    private void showTeleportPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">üåÄ –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–Ø üåÄ</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        // –õ–æ–∫–∞—Ü–∏–∏
        int[][] locations = {
            {82698, 148638, -3473, 50000, 0}, // Giran
            {111409, 219364, -3545, 50000, 0}, // Heine  
            {-84318, 244579, -3730, 30000, 0}, // Talking Island
            {-44836, -112524, -235, 30000, 0}, // Elven Village
            {115113, -178212, -901, 30000, 0}, // Dark Elven Village
            {-80826, 149775, -3043, 30000, 0}, // Orc Village
            {-12672, 122776, -3116, 30000, 0}, // Dwarven Village
            {146331, 25762, -2018, 60000, 0}, // Aden
            {116819, 76994, -2714, 70000, 0}, // Hunters Village
            {-117251, 46890, 360, 80000, 0} // Goddard
        };
        
        String[] locationNames = {
            "üè∞ –ì–∏—Ä–∞–Ω", "üåä –•–µ–π–Ω", "üèùÔ∏è –û—Å—Ç—Ä–æ–≤ –ì–æ–≤–æ—Ä—è—â–∏—Ö", "üå≤ –≠–ª—å—Ñ–∏–π—Å–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è",
            "üåô –¢–µ–º–Ω–∞—è —ç–ª—å—Ñ–∏–π—Å–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è", "‚öîÔ∏è –û—Ä–æ—á—å—è –¥–µ—Ä–µ–≤–Ω—è", "‚õèÔ∏è –ì–Ω–æ–º—å—è –¥–µ—Ä–µ–≤–Ω—è",
            "üëë –ê–¥–µ–Ω", "üèπ –î–µ—Ä–µ–≤–Ω—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤", "üèîÔ∏è –ì–æ–¥–¥–∞—Ä–¥"
        };
        
        html.append("<table width=\"320\">");
        
        for (int i = 0; i < locations.length; i += 2) {
            html.append("<tr>");
            
            // –ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è
            long cost1 = calculateTeleportCost(player, locations[i][3]);
            html.append("<td><button value=\"").append(locationNames[i]).append("\" action=\"bypass -h voice .panel teleport ").append(i).append("\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
            
            // –í—Ç–æ—Ä–∞—è –ª–æ–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (i + 1 < locations.length) {
                long cost2 = calculateTeleportCost(player, locations[i + 1][3]);
                html.append("<td><button value=\"").append(locationNames[i + 1]).append("\" action=\"bypass -h voice .panel teleport ").append(i + 1).append("\" width=\"150\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
            } else {
                html.append("<td></td>");
            }
            
            html.append("</tr>");
        }
        
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
        html.append("<table width=\"320\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏</font></td></tr>");
        
        for (int i = 0; i < Math.min(5, locations.length); i++) {
            long cost = calculateTeleportCost(player, locations[i][3]);
            html.append("<tr>");
            html.append("<td>").append(locationNames[i]).append(":</td>");
            html.append("<td align=\"right\">").append(String.format("%,d", cost)).append(" –∞–¥–µ–Ω—ã</td>");
            html.append("</tr>");
        }
        
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö
        if (player.getLevel() <= 20 || player.isNoble() || (player.getClan() != null && player.getClan().getLevel() >= 5)) {
            html.append("<table width=\"320\" bgcolor=\"333333\">");
            html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üéÅ –í–∞—à–∏ —Å–∫–∏–¥–∫–∏</font></td></tr>");
            
            if (player.getLevel() <= 20) {
                html.append("<tr><td>–°–∫–∏–¥–∫–∞ –Ω–æ–≤–∏—á–∫–∞:</td><td align=\"right\"><font color=\"66FF66\">-50%</font></td></tr>");
            }
            if (player.isNoble()) {
                html.append("<tr><td>–°–∫–∏–¥–∫–∞ –¥–≤–æ—Ä—è–Ω–∏–Ω–∞:</td><td align=\"right\"><font color=\"66FF66\">-20%</font></td></tr>");
            }
            if (player.getClan() != null && player.getClan().getLevel() >= 5) {
                html.append("<tr><td>–ö–ª–∞–Ω–æ–≤–∞—è —Å–∫–∏–¥–∫–∞:</td><td align=\"right\"><font color=\"66FF66\">-10%</font></td></tr>");
            }
            
            html.append("</table><br>");
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        html.append("<font color=\"FF6666\" size=\"1\">‚ö†Ô∏è –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—é!</font><br>");
        html.append("<font color=\"66FF66\" size=\"1\">üí° –°–∫–∏–¥–∫–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è</font><br><br>");
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
     */
    private long calculateTeleportCost(L2PcInstance player, long baseCost) {
        double multiplier = 1.0;
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        if (player.getLevel() <= 20) {
            multiplier *= 0.5; // 50% —Å–∫–∏–¥–∫–∞
        }
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –¥–≤–æ—Ä—è–Ω
        if (player.isNoble()) {
            multiplier *= 0.8; // 20% —Å–∫–∏–¥–∫–∞
        }
        
        // –ö–ª–∞–Ω–æ–≤–∞—è —Å–∫–∏–¥–∫–∞
        if (player.getClan() != null && player.getClan().getLevel() >= 5) {
            multiplier *= 0.9; // 10% —Å–∫–∏–¥–∫–∞
        }
        
        return (long)(baseCost * multiplier);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
     */
    private void performTeleport(L2PcInstance player, int locationIndex) {
        int[][] locations = {
            {82698, 148638, -3473, 50000, 0}, // Giran
            {111409, 219364, -3545, 50000, 0}, // Heine  
            {-84318, 244579, -3730, 30000, 0}, // Talking Island
            {-44836, -112524, -235, 30000, 0}, // Elven Village
            {115113, -178212, -901, 30000, 0}, // Dark Elven Village
            {-80826, 149775, -3043, 30000, 0}, // Orc Village
            {-12672, 122776, -3116, 30000, 0}, // Dwarven Village
            {146331, 25762, -2018, 60000, 0}, // Aden
            {116819, 76994, -2714, 70000, 0}, // Hunters Village
            {-117251, 46890, 360, 80000, 0} // Goddard
        };
        
        String[] locationNames = {
            "–ì–∏—Ä–∞–Ω", "–•–µ–π–Ω", "–û—Å—Ç—Ä–æ–≤ –ì–æ–≤–æ—Ä—è—â–∏—Ö", "–≠–ª—å—Ñ–∏–π—Å–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è",
            "–¢–µ–º–Ω–∞—è —ç–ª—å—Ñ–∏–π—Å–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è", "–û—Ä–æ—á—å—è –¥–µ—Ä–µ–≤–Ω—è", "–ì–Ω–æ–º—å—è –¥–µ—Ä–µ–≤–Ω—è",
            "–ê–¥–µ–Ω", "–î–µ—Ä–µ–≤–Ω—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤", "–ì–æ–¥–¥–∞—Ä–¥"
        };
        
        if (locationIndex < 0 || locationIndex >= locations.length) {
            player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (player.isInCombat()) {
            player.sendMessage("‚ùå –ù–µ–ª—å–∑—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—é!");
            return;
        }
        
        if (player.isCastingNow() || player.isMovementDisabled() || player.isMuted() || 
            player.isAlikeDead() || player.inObserverMode() || player.isCombatFlagEquipped()) {
            player.sendMessage("‚ùå –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!");
            return;
        }
        
        int[] location = locations[locationIndex];
        long cost = calculateTeleportCost(player, location[3]);
        
        if (player.getAdena() < cost) {
            player.sendMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–¥–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: " + String.format("%,d", cost));
            return;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
        player.reduceAdena("Teleport", cost, null, true);
        player.teleToLocation(location[0], location[1], location[2]);
        
        player.sendMessage("‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ " + locationNames[locationIndex] + " –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
     */
    private void showInfoPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–°–û–ù–ê–ñ–ï üìä</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"350\" height=\"1\"><br>");
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        html.append("<table width=\"350\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</font></td></tr>");
        html.append("<tr><td width=\"175\">–ò–º—è:</td><td width=\"175\">").append(player.getName()).append("</td></tr>");
        html.append("<tr><td>–£—Ä–æ–≤–µ–Ω—å:</td><td><font color=\"LEVEL\">").append(player.getLevel()).append("</font></td></tr>");
        html.append("<tr><td>–ö–ª–∞—Å—Å:</td><td>").append(player.getTemplate().getClassName()).append("</td></tr>");
        html.append("<tr><td>–†–∞—Å–∞:</td><td>").append(player.getRace().toString()).append("</td></tr>");
        html.append("<tr><td>–ö–ª–∞–Ω:</td><td>").append(player.getClan() != null ? player.getClan().getName() : "<font color=\"777777\">–ù–µ—Ç</font>").append("</td></tr>");
        if (player.getClan() != null && player.getClan().getAllyName() != null) {
            html.append("<tr><td>–ê–ª—å—è–Ω—Å:</td><td>").append(player.getClan().getAllyName()).append("</td></tr>");
        }
        html.append("</table><br>");
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        html.append("<table width=\"350\" bgcolor=\"222222\">");
        html.append("<tr><td colspan=\"4\" align=\"center\"><font color=\"LEVEL\">‚öîÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</font></td></tr>");
        html.append("<tr>");
        html.append("<td width=\"87\">HP:</td><td width=\"88\"><font color=\"00FF00\">").append((int)player.getCurrentHp()).append("/").append(player.getMaxHp()).append("</font></td>");
        html.append("<td width=\"87\">MP:</td><td width=\"88\"><font color=\"0099FF\">").append((int)player.getCurrentMp()).append("/").append(player.getMaxMp()).append("</font></td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td>CP:</td><td><font color=\"FFFF00\">").append((int)player.getCurrentCp()).append("/").append(player.getMaxCp()).append("</font></td>");
        html.append("<td>–°–∫–æ—Ä–æ—Å—Ç—å:</td><td>").append(player.getRunSpeed()).append("</td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td>P.Atk:</td><td>").append(player.getPAtk(null)).append("</td>");
        html.append("<td>M.Atk:</td><td>").append(player.getMAtk(null, null)).append("</td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td>P.Def:</td><td>").append(player.getPDef(null)).append("</td>");
        html.append("<td>M.Def:</td><td>").append(player.getMDef(null, null)).append("</td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ PvP
        html.append("<table width=\"350\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ PvP</font></td></tr>");
        html.append("<tr><td width=\"175\">–ê–¥–µ–Ω–∞:</td><td width=\"175\"><font color=\"FFFF00\">").append(String.format("%,d", player.getAdena())).append("</font></td></tr>");
        html.append("<tr><td>PvP —É–±–∏–π—Å—Ç–≤–∞:</td><td><font color=\"FF6600\">").append(player.getPvpKills()).append("</font></td></tr>");
        html.append("<tr><td>PK —É–±–∏–π—Å—Ç–≤–∞:</td><td><font color=\"FF0000\">").append(player.getPkKills()).append("</font></td></tr>");
        html.append("<tr><td>–ö–∞—Ä–º–∞:</td><td>").append(player.getKarma() > 0 ? "<font color=\"FF0000\">" + player.getKarma() + "</font>" : "<font color=\"66FF66\">0</font>").append("</td></tr>");
        html.append("</table><br>");
        
        // –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–Ω–µ–ª–∏
        long onlineTime = (System.currentTimeMillis() - player.getOnlineTime()) / 1000;
        long hours = onlineTime / 3600;
        long minutes = (onlineTime % 3600) / 60;
        
        html.append("<table width=\"350\" bgcolor=\"222222\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏</font></td></tr>");
        html.append("<tr><td width=\"175\">–í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω:</td><td width=\"175\">").append(hours).append("—á ").append(minutes).append("–º</td></tr>");
        html.append("<tr><td>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø–∞–Ω–µ–ª–∏:</td><td><font color=\"LEVEL\">").append(USAGE_STATS.getOrDefault(player.getObjectId(), 0)).append("</font></td></tr>");
        html.append("</table><br>");
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        html.append("<table width=\"350\">");
        html.append("<tr>");
        html.append("<td><button value=\"üîÑ –û–±–Ω–æ–≤–∏—Ç—å\" action=\"bypass -h voice .panel info\" width=\"115\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\" action=\"bypass -h voice .panel settings\" width=\"115\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üè† –ì–ª–∞–≤–Ω–∞—è\" action=\"bypass -h voice .panel\" width=\"115\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table>");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private void showSettingsPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ù–ï–õ–ò ‚öôÔ∏è</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        html.append("<table width=\"320\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–Ω–µ–ª–∏</font></td></tr>");
        html.append("<tr><td>–í–µ—Ä—Å–∏—è:</td><td><font color=\"LEVEL\">2.0.0</font></td></tr>");
        html.append("<tr><td>–ö–æ–º–∞–Ω–¥—ã:</td><td>.panel, .menu, .pp</td></tr>");
        html.append("<tr><td>–§—É–Ω–∫—Ü–∏–π:</td><td>–ó–∞—Ç–æ—á–∫–∞, –ú–∞–≥–∞–∑–∏–Ω, –ë–∞—Ñ—ã, –¢–µ–ª–µ–ø–æ—Ä—Ç</td></tr>");
        html.append("<tr><td>–°—Ç–∞—Ç—É—Å:</td><td><font color=\"66FF66\">–ê–∫—Ç–∏–≤–Ω–∞</font></td></tr>");
        html.append("</table><br>");
        
        html.append("<table width=\"320\" bgcolor=\"222222\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</font></td></tr>");
        html.append("<tr><td colspan=\"2\">‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞—Ç–æ—á–∫—É –¥–ª—è —Ü–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</td></tr>");
        html.append("<tr><td colspan=\"2\">‚Ä¢ –°–∫–∏–¥–∫–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è (–Ω–æ–≤–∏—á–æ–∫ + –¥–≤–æ—Ä—è–Ω–∏–Ω + –∫–ª–∞–Ω)</td></tr>");
        html.append("<tr><td colspan=\"2\">‚Ä¢ –ë–∞—Ñ—ã \"–í—Å–µ —Å—Ä–∞–∑—É\" –¥–∞—é—Ç 20% —Å–∫–∏–¥–∫—É</td></tr>");
        html.append("<tr><td colspan=\"2\">‚Ä¢ VIP –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Å–æ–±—ã–º –±–∞—Ñ–∞–º</td></tr>");
        html.append("</table><br>");
        
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center>/*
 * Copyright ¬© 2004-2023 L2J DataPack
 * 
 * This file is part of L2J DataPack.
 * 
 * L2J DataPack is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J DataPack is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.datapack.handlers.voicedcommandhandlers;

import static com.l2jserver.gameserver.config.Configuration.customs;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.concurrent.ConcurrentHashMap;

import com.l2jserver.gameserver.cache.HtmCache;
import com.l2jserver.gameserver.handler.IVoicedCommandHandler;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;
import com.l2jserver.gameserver.network.serverpackets.NpcHtmlMessage;

/**
 * –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–≥—Ä–æ–∫–∞
 * –í–∫–ª—é—á–∞–µ—Ç: –∑–∞—Ç–æ—á–∫—É, –º–∞–≥–∞–∑–∏–Ω, –±–∞—Ñ—ã, —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * @author YourName
 */
public class PlayerPanel implements IVoicedCommandHandler {
    
    private static final String[] VOICED_COMMANDS = {
        "panel",
        "menu", 
        "pp"
    };
    
    // –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    private static final Map<Integer, Long> LAST_USAGE = new ConcurrentHashMap<>();
    private static final long COOLDOWN_TIME = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    private static final Map<Integer, Integer> USAGE_STATS = new ConcurrentHashMap<>();
    
    @Override
    public boolean useVoicedCommand(String command, L2PcInstance activeChar, String params) {
        if (activeChar == null) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º–∞
        if (!checkCooldown(activeChar)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if (!canUsePanel(activeChar)) {
            activeChar.sendMessage("‚ùå –ü–∞–Ω–µ–ª—å –∏–≥—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!");
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateUsageStats(activeChar);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        if (params == null || params.isEmpty()) {
            showMainPanel(activeChar);
        } else {
            handlePanelAction(activeChar, params);
        }
        
        return true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –∫–æ–º–∞–Ω–¥
     */
    private boolean checkCooldown(L2PcInstance player) {
        int playerId = player.getObjectId();
        long currentTime = System.currentTimeMillis();
        
        if (LAST_USAGE.containsKey(playerId)) {
            long lastUsage = LAST_USAGE.get(playerId);
            if (currentTime - lastUsage < COOLDOWN_TIME) {
                long remainingTime = COOLDOWN_TIME - (currentTime - lastUsage);
                player.sendMessage("‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ " + (remainingTime / 1000.0) + " —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!");
                return false;
            }
        }
        
        LAST_USAGE.put(playerId, currentTime);
        return true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
     */
    private boolean canUsePanel(L2PcInstance player) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        if (player.getLevel() < 1) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (player.isDead() || player.isInJail()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω
        if (player.isInOlympiadMode() || player.isInSiege()) {
            return false;
        }
        
        return true;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    private void updateUsageStats(L2PcInstance player) {
        int playerId = player.getObjectId();
        USAGE_STATS.put(playerId, USAGE_STATS.getOrDefault(playerId, 0) + 1);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–∞–Ω–µ–ª–∏
     */
    private void handlePanelAction(L2PcInstance player, String params) {
        StringTokenizer st = new StringTokenizer(params);
        if (!st.hasMoreTokens()) {
            showMainPanel(player);
            return;
        }
        
        String action = st.nextToken().toLowerCase();
        
        switch (action) {
            case "enchant":
                handleEnchantAction(player, st);
                break;
            case "shop":
                handleShopAction(player, st);
                break;
            case "buffs":
                handleBuffsAction(player, st);
                break;
            case "teleport":
                handleTeleportAction(player, st);
                break;
            case "info":
                showInfoPanel(player);
                break;
            case "settings":
                showSettingsPanel(player);
                break;
            default:
                showMainPanel(player);
                break;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
     */
    private void showMainPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
        String template = loadTemplate("main_panel.htm");
        if (template != null) {
            html.append(template);
        } else {
            html.append(createMainPanelHTML(player));
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        String finalHtml = html.toString()
            .replace("%player_name%", player.getName())
            .replace("%player_level%", String.valueOf(player.getLevel()))
            .replace("%player_class%", player.getTemplate().getClassName())
            .replace("%current_hp%", String.valueOf((int)player.getCurrentHp()))
            .replace("%max_hp%", String.valueOf(player.getMaxHp()))
            .replace("%current_mp%", String.valueOf((int)player.getCurrentMp()))
            .replace("%max_mp%", String.valueOf(player.getMaxMp()))
            .replace("%player_adena%", String.valueOf(player.getAdena()))
            .replace("%pvp_kills%", String.valueOf(player.getPvpKills()))
            .replace("%usage_count%", String.valueOf(USAGE_STATS.getOrDefault(player.getObjectId(), 0)));
        
        sendHtmlMessage(player, finalHtml);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç HTML –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
     */
    private String createMainPanelHTML(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–ü–∞–Ω–µ–ª—å –ò–≥—Ä–æ–∫–∞</title></head><body>");
        html.append("<center>");
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        html.append("<table width=\"320\" bgcolor=\"000000\">");
        html.append("<tr><td align=\"center\">");
        html.append("<font color=\"LEVEL\" size=\"3\">üéÆ –ü–ê–ù–ï–õ–¨ –ò–ì–†–û–ö–ê üéÆ</font><br>");
        html.append("<font color=\"AAAAAA\">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ").append(player.getName()).append("!</font>");
        html.append("</td></tr>");
        html.append("</table><br>");
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        html.append("<table width=\"320\">");
        html.append("<tr>");
        html.append("<td><button value=\"‚öîÔ∏è –ó–∞—Ç–æ—á–∫–∞\" action=\"bypass -h voice .panel enchant\" width=\"150\" height=\"30\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üõí –ú–∞–≥–∞–∑–∏–Ω\" action=\"bypass -h voice .panel shop\" width=\"150\" height=\"30\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td><button value=\"‚ú® –ë–∞—Ñ—ã\" action=\"bypass -h voice .panel buffs\" width=\"150\" height=\"30\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç\" action=\"bypass -h voice .panel teleport\" width=\"150\" height=\"30\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        html.append("<button value=\"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\" action=\"bypass -h voice .panel info\" width=\"320\" height=\"30\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"><br>");
        
        // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        html.append("<table width=\"320\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"4\" align=\"center\"><font color=\"LEVEL\">üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</font></td></tr>");
        html.append("<tr>");
        html.append("<td width=\"80\">–£—Ä: <font color=\"LEVEL\">").append(player.getLevel()).append("</font></td>");
        html.append("<td width=\"80\">HP: <font color=\"00FF00\">").append((int)player.getCurrentHp()).append("</font></td>");
        html.append("<td width=\"80\">MP: <font color=\"0099FF\">").append((int)player.getCurrentMp()).append("</font></td>");
        html.append("<td width=\"80\">PvP: <font color=\"FF6600\">").append(player.getPvpKills()).append("</font></td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td colspan=\"2\">–ê–¥–µ–Ω–∞: <font color=\"FFFF00\">").append(String.format("%,d", player.getAdena())).append("</font></td>");
        html.append("<td colspan=\"2\">–ö–ª–∞–Ω: <font color=\"LEVEL\">").append(player.getClan() != null ? player.getClan().getName() : "–ù–µ—Ç").append("</font></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –§—É—Ç–µ—Ä
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        html.append("<font color=\"777777\" size=\"1\">üí° –ö–æ–º–∞–Ω–¥—ã: .panel, .menu, .pp | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ").append(USAGE_STATS.getOrDefault(player.getObjectId(), 0)).append("</font>");
        
        html.append("</center></body></html>");
        
        return html.toString();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞—Ç–æ—á–∫–∏
     */
    private void handleEnchantAction(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            showEnchantPanel(player);
            return;
        }
        
        String subAction = st.nextToken();
        
        switch (subAction.toLowerCase()) {
            case "weapon":
                handleWeaponEnchant(player, st);
                break;
            case "armor":
                handleArmorEnchant(player, st);
                break;
            case "jewelry":
                handleJewelryEnchant(player, st);
                break;
            case "safe":
                handleSafeEnchant(player, st);
                break;
            default:
                showEnchantPanel(player);
                break;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∑–∞—Ç–æ—á–∫–∏
     */
    private void showEnchantPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–°–∏—Å—Ç–µ–º–∞ –∑–∞—Ç–æ—á–∫–∏</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –ó–ê–¢–û–ß–ö–ò ‚öîÔ∏è</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –æ—Ä—É–∂–∏–∏
        L2ItemInstance weapon = player.getActiveWeaponInstance();
        if (weapon != null) {
            html.append("<table width=\"320\" bgcolor=\"111111\">");
            html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üó°Ô∏è –¢–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ</font></td></tr>");
            html.append("<tr>");
            html.append("<td width=\"200\">").append(weapon.getName());
            if (weapon.getEnchantLevel() > 0) {
                html.append(" <font color=\"LEVEL\">+").append(weapon.getEnchantLevel()).append("</font>");
            }
            html.append("</td>");
            html.append("<td width=\"120\">").append(weapon.getItem().getCrystalType().toString()).append("</td>");
            html.append("</tr>");
            html.append("</table><br>");
        } else {
            html.append("<font color=\"FF6666\">‚ùå –û—Ä—É–∂–∏–µ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ!</font><br><br>");
        }
        
        // –ö–Ω–æ–ø–∫–∏ –∑–∞—Ç–æ—á–∫–∏
        html.append("<table width=\"320\">");
        html.append("<tr>");
        html.append("<td><button value=\"‚öîÔ∏è –û—Ä—É–∂–∏–µ +1\" action=\"bypass -h voice .panel enchant weapon 1\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"‚öîÔ∏è –û—Ä—É–∂–∏–µ +3\" action=\"bypass -h voice .panel enchant weapon 3\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"‚öîÔ∏è –û—Ä—É–∂–∏–µ +5\" action=\"bypass -h voice .panel enchant weapon 5\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td><button value=\"üõ°Ô∏è –ë—Ä–æ–Ω—è +1\" action=\"bypass -h voice .panel enchant armor 1\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üõ°Ô∏è –ë—Ä–æ–Ω—è +3\" action=\"bypass -h voice .panel enchant armor 3\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üõ°Ô∏è –ë—Ä–æ–Ω—è +5\" action=\"bypass -h voice .panel enchant armor 5\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞
        html.append("<table width=\"320\">");
        html.append("<tr>");
        html.append("<td><button value=\"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞\" action=\"bypass -h voice .panel enchant safe\" width=\"160\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üíé –£–∫—Ä–∞—à–µ–Ω–∏—è\" action=\"bypass -h voice .panel enchant jewelry\" width=\"160\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
        if (weapon != null) {
            long cost1 = EnchantSystem.calculateEnchantCost(weapon, 1, false);
            long cost3 = EnchantSystem.calculateEnchantCost(weapon, 3, false);
            long cost5 = EnchantSystem.calculateEnchantCost(weapon, 5, false);
            long costSafe = EnchantSystem.calculateEnchantCost(weapon, 1, true);
            
            html.append("<table width=\"320\" bgcolor=\"333333\">");
            html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ç–æ—á–∫–∏</font></td></tr>");
            html.append("<tr><td>+1 —É—Ä–æ–≤–µ–Ω—å:</td><td align=\"right\">").append(String.format("%,d", cost1)).append(" –∞–¥–µ–Ω—ã</td></tr>");
            html.append("<tr><td>+3 —É—Ä–æ–≤–Ω—è:</td><td align=\"right\">").append(String.format("%,d", cost3)).append(" –∞–¥–µ–Ω—ã</td></tr>");
            html.append("<tr><td>+5 —É—Ä–æ–≤–Ω–µ–π:</td><td align=\"right\">").append(String.format("%,d", cost5)).append(" –∞–¥–µ–Ω—ã</td></tr>");
            html.append("<tr><td>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è +1:</td><td align=\"right\">").append(String.format("%,d", costSafe)).append(" –∞–¥–µ–Ω—ã</td></tr>");
            html.append("</table><br>");
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        html.append("<font color=\"FF6666\" size=\"1\">‚ö†Ô∏è –ó–∞—Ç–æ—á–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞!</font><br>");
        html.append("<font color=\"66FF66\" size=\"1\">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞ –Ω–µ —Ä–∞–∑—Ä—É—à–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç, –Ω–æ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–∂–µ</font><br><br>");
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ç–æ—á–∫–∏ –æ—Ä—É–∂–∏—è
     */
    private void handleWeaponEnchant(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            player.sendMessage("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏!");
            return;
        }
        
        try {
            int levels = Integer.parseInt(st.nextToken());
            L2ItemInstance weapon = player.getActiveWeaponInstance();
            
            if (weapon == null) {
                player.sendMessage("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ!");
                showEnchantPanel(player);
                return;
            }
            
            EnchantSystem.EnchantResult result = EnchantSystem.enchantItem(player, weapon, levels, false);
            
            switch (result) {
                case SUCCESS:
                    player.sendMessage("‚úÖ " + result.getMessage());
                    break;
                case FAILURE:
                    player.sendMessage("‚ùå " + result.getMessage());
                    break;
                case BREAK:
                    player.sendMessage("üí• " + result.getMessage());
                    break;
                case MAX_REACHED:
                    player.sendMessage("‚≠ê " + result.getMessage());
                    break;
            }
            
            showEnchantPanel(player);
            
        } catch (NumberFormatException e) {
            player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!");
            showEnchantPanel(player);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ç–æ—á–∫–∏ –±—Ä–æ–Ω–∏
     */
    private void handleArmorEnchant(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            player.sendMessage("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏!");
            return;
        }
        
        try {
            int levels = Integer.parseInt(st.nextToken());
            L2ItemInstance[] armorItems = EnchantSystem.getEquippedItems(player, EnchantSystem.EnchantType.ARMOR);
            
            if (armorItems.length == 0) {
                player.sendMessage("‚ùå –ë—Ä–æ–Ω—è –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–∞!");
                showEnchantPanel(player);
                return;
            }
            
            // –ó–∞—Ç–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –±—Ä–æ–Ω–∏
            L2ItemInstance armor = armorItems[0];
            EnchantSystem.EnchantResult result = EnchantSystem.enchantItem(player, armor, levels, false);
            
            switch (result) {
                case SUCCESS:
                    player.sendMessage("‚úÖ " + result.getMessage() + " (" + armor.getName() + ")");
                    break;
                case FAILURE:
                    player.sendMessage("‚ùå " + result.getMessage() + " (" + armor.getName() + ")");
                    break;
                case BREAK:
                    player.sendMessage("üí• " + result.getMessage() + " (" + armor.getName() + ")");
                    break;
                case MAX_REACHED:
                    player.sendMessage("‚≠ê " + result.getMessage() + " (" + armor.getName() + ")");
                    break;
            }
            
            showEnchantPanel(player);
            
        } catch (NumberFormatException e) {
            player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!");
            showEnchantPanel(player);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞—Ç–æ—á–∫–∏
     */
    private void handleSafeEnchant(L2PcInstance player, StringTokenizer st) {
        L2ItemInstance weapon = player.getActiveWeaponInstance();
        
        if (weapon == null) {
            player.sendMessage("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ!");
            showEnchantPanel(player);
            return;
        }
        
        EnchantSystem.EnchantResult result = EnchantSystem.enchantItem(player, weapon, 1, true);
        
        switch (result) {
            case SUCCESS:
                player.sendMessage("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–∞! " + weapon.getName() + " +" + weapon.getEnchantLevel());
                break;
            case FAILURE:
                player.sendMessage("‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç —Ü–µ–ª!");
                break;
            case MAX_REACHED:
                player.sendMessage("‚≠ê –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏!");
                break;
            default:
                player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ç–æ—á–∫–µ!");
                break;
        }
        
        showEnchantPanel(player);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞—Ñ–∞–º–∏
     */
    private void handleBuffsAction(L2PcInstance player, StringTokenizer st) {
        if (!st.hasMoreTokens()) {
            showBuffsPanel(player);
            return;
        }
        
        String subAction = st.nextToken().toLowerCase();
        
        switch (subAction) {
            case "all":
                int totalBuffs = BuffSystem.applyAllBuffs(player);
                if (totalBuffs > 0) {
                    showBuffsPanel(player);
                }
                break;
            case "defense":
                BuffSystem.applyCategoryBuffs(player, BuffSystem.BuffCategory.DEFENSE);
                showBuffsPanel(player);
                break;
            case "attack":
                BuffSystem.applyCategoryBuffs(player, BuffSystem.BuffCategory.ATTACK);
                showBuffsPanel(player);
                break;
            case "speed":
                BuffSystem.applyCategoryBuffs(player, BuffSystem.BuffCategory.SPEED);
                showBuffsPanel(player);
                break;
            case "magic":
                BuffSystem.applyCategoryBuffs(player, BuffSystem.BuffCategory.MAGIC);
                showBuffsPanel(player);
                break;
            case "remove":
                BuffSystem.removeAllBuffs(player);
                showBuffsPanel(player);
                break;
            case "apply":
                if (st.hasMoreTokens()) {
                    try {
                        int skillId = Integer.parseInt(st.nextToken());
                        BuffSystem.BuffInfo buff = BuffSystem.findBuffBySkillId(skillId);
                        if (buff != null) {
                            BuffSystem.applyBuff(player, buff);
                        }
                    } catch (NumberFormatException e) {
                        player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–∫–∏–ª–ª–∞!");
                    }
                }
                showBuffsPanel(player);
                break;
            default:
                showBuffsPanel(player);
                break;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –±–∞—Ñ–æ–≤
     */
    private void showBuffsPanel(L2PcInstance player) {
        StringBuilder html = new StringBuilder();
        
        html.append("<html><head><title>–°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤</title></head><body>");
        html.append("<center>");
        html.append("<font color=\"LEVEL\" size=\"3\">‚ú® –°–ò–°–¢–ï–ú–ê –ë–ê–§–û–í ‚ú®</font><br>");
        html.append("<img src=\"L2UI.SquareWhite\" width=\"320\" height=\"1\"><br>");
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∞—Ñ–æ–≤
        html.append("<table width=\"320\">");
        html.append("<tr>");
        html.append("<td><button value=\"üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ\" action=\"bypass -h voice .panel buffs defense\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"‚öîÔ∏è –ë–æ–µ–≤—ã–µ\" action=\"bypass -h voice .panel buffs attack\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üèÉ –°–∫–æ—Ä–æ—Å—Ç—å\" action=\"bypass -h voice .panel buffs speed\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("<tr>");
        html.append("<td><button value=\"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ\" action=\"bypass -h voice .panel buffs magic\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"‚ú® –í–°–ï –ë–ê–§–´\" action=\"bypass -h voice .panel buffs all\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("<td><button value=\"üóëÔ∏è –°–Ω—è—Ç—å\" action=\"bypass -h voice .panel buffs remove\" width=\"100\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\"></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        html.append("<table width=\"320\" bgcolor=\"111111\">");
        html.append("<tr><td colspan=\"2\" align=\"center\"><font color=\"LEVEL\">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∞—Ñ–æ–≤</font></td></tr>");
        
        for (BuffSystem.BuffCategory category : BuffSystem.BuffCategory.values()) {
            long cost = BuffSystem.getCategoryCost(player, category);
            int count = BuffSystem.getAvailableBuffsCount(player, category);
            
            if (count > 0) {
                html.append("<tr>");
                html.append("<td>").append(category.getDisplayName()).append(" (").append(count).append(" —à—Ç):</td>");
                html.append("<td align=\"right\">").append(String.format("%,d", cost)).append(" a</td>");
                html.append("</tr>");
            }
        }
        
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –±–∞—Ñ–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π
        long totalCost = 0;
        for (BuffSystem.BuffCategory category : BuffSystem.BuffCategory.values()) {
            totalCost += BuffSystem.getCategoryCost(player, category);
        }
        totalCost = (long)(totalCost * 0.8); // 20% —Å–∫–∏–¥–∫–∞
        
        html.append("<tr bgcolor=\"333333\">");
        html.append("<td><font color=\"LEVEL\">–í–°–ï –ë–ê–§–´ (—Å–∫–∏–¥–∫–∞ 20%):</font></td>");
        html.append("<td align=\"right\"><font color=\"LEVEL\">").append(String.format("%,d", totalCost)).append(" a</font></td>");
        html.append("</tr>");
        html.append("</table><br>");
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        html.append("<button value=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" action=\"bypass -h voice .panel\" width=\"200\" height=\"25\" back=\"L2UI_ct1.button_df\" fore=\"L2UI_ct1.button_df\">");
        
        html.append("</center></body></html>");
        
        sendHtmlMessage(player, html.toString());
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω
     */
    private String loadTemplate(String filename) {
        try {
            return HtmCache.getInstance().getHtm(null, "data/html/panel/" + filename);
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
     */
    private voi/*
 * Copyright ¬© 2004-2023 L2J DataPack
 * 
 * This file is part of L2J DataPack.
 * 
 * L2J DataPack is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J DataPack is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.datapack.handlers.voicedcommandhandlers;

import static com.l2jserver.gameserver.config.Configuration.customs;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.concurrent.ConcurrentHashMap;

import com.l2jserver.gameserver.cache.HtmCache;
import com.l2jserver.gameserver.handler.IVoicedCommandHandler;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;
import com.l2jserver.gameserver.network.