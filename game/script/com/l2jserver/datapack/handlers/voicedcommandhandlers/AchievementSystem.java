/*
 * Copyright ¬© 2004-2023 L2J DataPack
 * 
 * This file is part of L2J DataPack.
 * 
 * L2J DataPack is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J DataPack is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.datapack.handlers.voicedcommandhandlers;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.l2jserver.commons.database.ConnectionFactory;
import com.l2jserver.gameserver.ThreadPoolManager;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.holders.ItemHolder;

/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥
 * @author YourName
 */
public class AchievementSystem {
    
    private static final Logger LOG = LoggerFactory.getLogger(AchievementSystem.class);
    
    // –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–æ–≤
    private static final Map<Integer, PlayerProgress> PLAYER_PROGRESS = new ConcurrentHashMap<>();
    
    // SQL –∑–∞–ø—Ä–æ—Å—ã
    private static final String SELECT_PROGRESS = "SELECT * FROM player_achievements WHERE player_id = ?";
    private static final String INSERT_ACHIEVEMENT = "INSERT INTO player_achievements (player_id, achievement_id, progress, completed, completion_date) VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE progress = ?, completed = ?, completion_date = ?";
    private static final String SELECT_DAILY_TASKS = "SELECT * FROM daily_tasks WHERE player_id = ? AND task_date = ?";
    private static final String INSERT_DAILY_TASK = "INSERT INTO daily_tasks (player_id, task_id, progress, completed, task_date) VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE progress = ?, completed = ?";
    
    /**
     * –¢–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    public enum AchievementType {
        PANEL_USAGE("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏", "üéÆ"),
        ENCHANT("–ó–∞—Ç–æ—á–∫–∞", "‚öîÔ∏è"),
        SHOPPING("–ü–æ–∫—É–ø–∫–∏", "üõí"),
        BUFFS("–ë–∞—Ñ—ã", "‚ú®"),
        TELEPORT("–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", "üåÄ"),
        BANKING("–ë–∞–Ω–∫–∏–Ω–≥", "üè¶"),
        SOCIAL("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ", "üë•"),
        COLLECTION("–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìö"),
        SPECIAL("–û—Å–æ–±—ã–µ", "‚≠ê");
        
        private final String displayName;
        private final String icon;
        
        AchievementType(String displayName, String icon) {
            this.displayName = displayName;
            this.icon = icon;
        }
        
        public String getDisplayName() { return displayName; }
        public String getIcon() { return icon; }
    }
    
    /**
     * –†–µ–¥–∫–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    public enum AchievementRarity {
        COMMON("–û–±—ã—á–Ω–æ–µ", "‚ö™", 1.0),
        UNCOMMON("–ù–µ–æ–±—ã—á–Ω–æ–µ", "üîµ", 1.5),
        RARE("–†–µ–¥–∫–æ–µ", "üü£", 2.0),
        EPIC("–≠–ø–∏—á–µ—Å–∫–æ–µ", "üü†", 3.0),
        LEGENDARY("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ", "üü°", 5.0),
        MYTHIC("–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ", "üî¥", 10.0);
        
        private final String displayName;
        private final String icon;
        private final double rewardMultiplier;
        
        AchievementRarity(String displayName, String icon, double rewardMultiplier) {
            this.displayName = displayName;
            this.icon = icon;
            this.rewardMultiplier = rewardMultiplier;
        }
        
        public String getDisplayName() { return displayName; }
        public String getIcon() { return icon; }
        public double getRewardMultiplier() { return rewardMultiplier; }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    public static class Achievement {
        private final int id;
        private final String name;
        private final String description;
        private final AchievementType type;
        private final AchievementRarity rarity;
        private final int maxProgress;
        private final List<ItemHolder> rewards;
        private final long experienceReward;
        private final boolean isHidden;        // –°–∫—Ä—ã—Ç–æ–µ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        private final boolean isRepeatable;    // –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        
        public Achievement(int id, String name, String description, AchievementType type, 
                          AchievementRarity rarity, int maxProgress, List<ItemHolder> rewards,
                          long experienceReward, boolean isHidden, boolean isRepeatable) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.type = type;
            this.rarity = rarity;
            this.maxProgress = maxProgress;
            this.rewards = rewards;
            this.experienceReward = experienceReward;
            this.isHidden = isHidden;
            this.isRepeatable = isRepeatable;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getId() { return id; }
        public String getName() { return name; }
        public String getDescription() { return description; }
        public AchievementType getType() { return type; }
        public AchievementRarity getRarity() { return rarity; }
        public int getMaxProgress() { return maxProgress; }
        public List<ItemHolder> getRewards() { return rewards; }
        public long getExperienceReward() { return experienceReward; }
        public boolean isHidden() { return isHidden; }
        public boolean isRepeatable() { return isRepeatable; }
    }
    
    /**
     * –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
     */
    public static class DailyTask {
        private final int id;
        private final String name;
        private final String description;
        private final AchievementType type;
        private final int targetProgress;
        private final List<ItemHolder> rewards;
        private final long experienceReward;
        
        public DailyTask(int id, String name, String description, AchievementType type,
                        int targetProgress, List<ItemHolder> rewards, long experienceReward) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.type = type;
            this.targetProgress = targetProgress;
            this.rewards = rewards;
            this.experienceReward = experienceReward;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getId() { return id; }
        public String getName() { return name; }
        public String getDescription() { return description; }
        public AchievementType getType() { return type; }
        public int getTargetProgress() { return targetProgress; }
        public List<ItemHolder> getRewards() { return rewards; }
        public long getExperienceReward() { return experienceReward; }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
     */
    public static class PlayerProgress {
        private final int playerId;
        private final Map<Integer, AchievementProgress> achievements;
        private final Map<Integer, TaskProgress> dailyTasks;
        private long panelExperience;
        private int panelLevel;
        
        public PlayerProgress(int playerId) {
            this.playerId = playerId;
            this.achievements = new ConcurrentHashMap<>();
            this.dailyTasks = new ConcurrentHashMap<>();
            this.panelExperience = 0;
            this.panelLevel = 1;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public int getPlayerId() { return playerId; }
        public Map<Integer, AchievementProgress> getAchievements() { return achievements; }
        public Map<Integer, TaskProgress> getDailyTasks() { return dailyTasks; }
        public long getPanelExperience() { return panelExperience; }
        public void setPanelExperience(long panelExperience) { this.panelExperience = panelExperience; }
        public int getPanelLevel() { return panelLevel; }
        public void setPanelLevel(int panelLevel) { this.panelLevel = panelLevel; }
        
        /**
         * –û–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
         */
        public long getExperienceForNextLevel() {
            return panelLevel * 10000L; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        }
        
        /**
         * –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
         */
        public double getProgressToNextLevel() {
            long expForNext = getExperienceForNextLevel();
            long currentLevelExp = panelExperience % expForNext;
            return (double)currentLevelExp / expForNext * 100;
        }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    public static class AchievementProgress {
        private int progress;
        private boolean completed;
        private long completionDate;
        
        public AchievementProgress() {
            this.progress = 0;
            this.completed = false;
            this.completionDate = 0;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public int getProgress() { return progress; }
        public void setProgress(int progress) { this.progress = progress; }
        public boolean isCompleted() { return completed; }
        public void setCompleted(boolean completed) { this.completed = completed; }
        public long getCompletionDate() { return completionDate; }
        public void setCompletionDate(long completionDate) { this.completionDate = completionDate; }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     */
    public static class TaskProgress {
        private int progress;
        private boolean completed;
        
        public TaskProgress() {
            this.progress = 0;
            this.completed = false;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public int getProgress() { return progress; }
        public void setProgress(int progress) { this.progress = progress; }
        public boolean isCompleted() { return completed; }
        public void setCompleted(boolean completed) { this.completed = completed; }
    }
    
    // –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
    private static final Map<Integer, Achievement> ALL_ACHIEVEMENTS = new HashMap<>();
    
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    private static final Map<Integer, DailyTask> DAILY_TASKS = new HashMap<>();
    
    static {
        initializeAchievements();
        initializeDailyTasks();
        startDailyReset();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    private static void initializeAchievements() {
        List<ItemHolder> commonRewards = List.of(new ItemHolder(57, 100000)); // 100k –∞–¥–µ–Ω—ã
        List<ItemHolder> rareRewards = List.of(new ItemHolder(57, 500000), new ItemHolder(3470, 1)); // 500k + –∑–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫
        List<ItemHolder> epicRewards = List.of(new ItemHolder(57, 1000000), new ItemHolder(3470, 5)); // 1–∫–∫ + 5 —Å–ª–∏—Ç–∫–æ–≤
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        ALL_ACHIEVEMENTS.put(1, new Achievement(1, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ", 
            AchievementType.PANEL_USAGE, AchievementRarity.COMMON, 1, commonRewards, 1000, false, false));
        
        ALL_ACHIEVEMENTS.put(2, new Achievement(2, "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å 100 —Ä–∞–∑", 
            AchievementType.PANEL_USAGE, AchievementRarity.UNCOMMON, 100, rareRewards, 5000, false, false));
        
        ALL_ACHIEVEMENTS.put(3, new Achievement(3, "–ú–∞—Å—Ç–µ—Ä –ø–∞–Ω–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å 1000 —Ä–∞–∑", 
            AchievementType.PANEL_USAGE, AchievementRarity.RARE, 1000, epicRewards, 20000, false, false));
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞—Ç–æ—á–∫–∏
        ALL_ACHIEVEMENTS.put(10, new Achievement(10, "–ü–µ—Ä–≤–∞—è –∑–∞—Ç–æ—á–∫–∞", "–ó–∞—Ç–æ—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤–ø–µ—Ä–≤—ã–µ", 
            AchievementType.ENCHANT, AchievementRarity.COMMON, 1, commonRewards, 1000, false, false));
        
        ALL_ACHIEVEMENTS.put(11, new Achievement(11, "–ú–∞—Å—Ç–µ—Ä –∑–∞—Ç–æ—á–∫–∏", "–ó–∞—Ç–æ—á–∏—Ç—å 100 –ø—Ä–µ–¥–º–µ—Ç–æ–≤", 
            AchievementType.ENCHANT, AchievementRarity.UNCOMMON, 100, rareRewards, 5000, false, false));
        
        ALL_ACHIEVEMENTS.put(12, new Achievement(12, "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫—É–∑–Ω–µ—Ü", "–ó–∞—Ç–æ—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–æ +15", 
            AchievementType.ENCHANT, AchievementRarity.EPIC, 1, epicRewards, 50000, false, false));
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
        ALL_ACHIEVEMENTS.put(20, new Achievement(20, "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞", "–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
            AchievementType.SHOPPING, AchievementRarity.COMMON, 1, commonRewards, 500, false, false));
        
        ALL_ACHIEVEMENTS.put(21, new Achievement(21, "–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π –º–∞–≥–∞–∑–∏–Ω–∞", "–ö—É–ø–∏—Ç—å 500 —Ç–æ–≤–∞—Ä–æ–≤", 
            AchievementType.SHOPPING, AchievementRarity.RARE, 500, epicRewards, 15000, false, false));
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞—Ñ–æ–≤
        ALL_ACHIEVEMENTS.put(30, new Achievement(30, "–ü–µ—Ä–≤—ã–π –±–∞—Ñ", "–ü–æ–ª—É—á–∏—Ç—å –±–∞—Ñ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å", 
            AchievementType.BUFFS, AchievementRarity.COMMON, 1, commonRewards, 500, false, false));
        
        ALL_ACHIEVEMENTS.put(31, new Achievement(31, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –±–∞—Ñ–æ–≤", "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –±–∞—Ñ–æ–≤", 
            AchievementType.BUFFS, AchievementRarity.EPIC, 7, epicRewards, 25000, false, false));
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        ALL_ACHIEVEMENTS.put(40, new Achievement(40, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ 5 —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤", 
            AchievementType.TELEPORT, AchievementRarity.UNCOMMON, 5, rareRewards, 3000, false, false));
        
        // –°–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        ALL_ACHIEVEMENTS.put(100, new Achievement(100, "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤ –ø–æ–ª–Ω–æ—á—å", 
            AchievementType.SPECIAL, AchievementRarity.LEGENDARY, 1, 
            List.of(new ItemHolder(57, 5000000), new ItemHolder(4037, 10)), 100000, true, false));
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        ALL_ACHIEVEMENTS.put(200, new Achievement(200, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", 
            AchievementType.PANEL_USAGE, AchievementRarity.UNCOMMON, 1, 
            List.of(new ItemHolder(57, 50000)), 1000, false, true));
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    private static void initializeDailyTasks() {
        DAILY_TASKS.put(1, new DailyTask(1, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å 10 —Ä–∞–∑", 
            AchievementType.PANEL_USAGE, 10, List.of(new ItemHolder(57, 50000)), 1000));
        
        DAILY_TASKS.put(2, new DailyTask(2, "–ó–∞—Ç–æ—á–∏ –ø—Ä–µ–¥–º–µ—Ç", "–ó–∞—Ç–æ—á–∏—Ç—å 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤", 
            AchievementType.ENCHANT, 5, List.of(new ItemHolder(57, 100000)), 2000));
        
        DAILY_TASKS.put(3, new DailyTask(3, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ö—É–ø–∏—Ç—å 10 —Ç–æ–≤–∞—Ä–æ–≤", 
            AchievementType.SHOPPING, 10, List.of(new ItemHolder(57, 75000)), 1500));
        
        DAILY_TASKS.put(4, new DailyTask(4, "–°–∏–ª–∞ –±–∞—Ñ–æ–≤", "–ü–æ–ª—É—á–∏—Ç—å 20 –±–∞—Ñ–æ–≤", 
            AchievementType.BUFFS, 20, List.of(new ItemHolder(57, 80000)), 1800));
        
        DAILY_TASKS.put(5, new DailyTask(5, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è 3 —Ä–∞–∑–∞", 
            AchievementType.TELEPORT, 3, List.of(new ItemHolder(57, 30000)), 800));
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞–Ω–∏–π
     */
    private static void startDailyReset() {
        ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(() -> {
            Calendar cal = Calendar.getInstance();
            if (cal.get(Calendar.HOUR_OF_DAY) == 0 && cal.get(Calendar.MINUTE) == 0) {
                resetDailyTasks();
            }
        }, 60000, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    /**
     * –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    private static void resetDailyTasks() {
        for (PlayerProgress progress : PLAYER_PROGRESS.values()) {
            progress.getDailyTasks().clear();
        }
        LOG.info("Daily tasks reset for all players");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    public static PlayerProgress getPlayerProgress(L2PcInstance player) {
        return getPlayerProgress(player.getObjectId());
    }
    
    public static PlayerProgress getPlayerProgress(int playerId) {
        PlayerProgress progress = PLAYER_PROGRESS.get(playerId);
        if (progress == null) {
            progress = loadPlayerProgress(playerId);
            PLAYER_PROGRESS.put(playerId, progress);
        }
        return progress;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private static PlayerProgress loadPlayerProgress(int playerId) {
        PlayerProgress progress = new PlayerProgress(playerId);
        
        try (Connection con = ConnectionFactory.getInstance().getConnection();
             PreparedStatement ps = con.prepareStatement(SELECT_PROGRESS)) {
            
            ps.setInt(1, playerId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int achievementId = rs.getInt("achievement_id");
                    AchievementProgress achProgress = new AchievementProgress();
                    achProgress.setProgress(rs.getInt("progress"));
                    achProgress.setCompleted(rs.getBoolean("completed"));
                    achProgress.setCompletionDate(rs.getLong("completion_date"));
                    progress.getAchievements().put(achievementId, achProgress);
                }
            }
        } catch (SQLException e) {
            LOG.error("Error loading player achievements for " + playerId, e);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        loadDailyTasks(progress);
        
        return progress;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    private static void loadDailyTasks(PlayerProgress progress) {
        String today = getTodayString();
        
        try (Connection con = ConnectionFactory.getInstance().getConnection();
             PreparedStatement ps = con.prepareStatement(SELECT_DAILY_TASKS)) {
            
            ps.setInt(1, progress.getPlayerId());
            ps.setString(2, today);
            
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int taskId = rs.getInt("task_id");
                    TaskProgress taskProgress = new TaskProgress();
                    taskProgress.setProgress(rs.getInt("progress"));
                    taskProgress.setCompleted(rs.getBoolean("completed"));
                    progress.getDailyTasks().put(taskId, taskProgress);
                }
            }
        } catch (SQLException e) {
            LOG.error("Error loading daily tasks for " + progress.getPlayerId(), e);
        }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    public static void progressAchievement(L2PcInstance player, AchievementType type, int amount) {
        PlayerProgress progress = getPlayerProgress(player);
        
        for (Achievement achievement : ALL_ACHIEVEMENTS.values()) {
            if (achievement.getType() != type) {
                continue;
            }
            
            AchievementProgress achProgress = progress.getAchievements().computeIfAbsent(
                achievement.getId(), k -> new AchievementProgress());
            
            if (achProgress.isCompleted() && !achievement.isRepeatable()) {
                continue;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            achProgress.setProgress(achProgress.getProgress() + amount);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (achProgress.getProgress() >= achievement.getMaxProgress() && !achProgress.isCompleted()) {
                completeAchievement(player, achievement, achProgress);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            saveAchievementProgress(player.getObjectId(), achievement.getId(), achProgress);
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
        progressDailyTasks(player, type, amount);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private static void completeAchievement(L2PcInstance player, Achievement achievement, AchievementProgress progress) {
        progress.setCompleted(true);
        progress.setCompletionDate(System.currentTimeMillis());
        
        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        for (ItemHolder reward : achievement.getRewards()) {
            long amount = (long)(reward.getCount() * achievement.getRarity().getRewardMultiplier());
            player.addItem("Achievement", reward.getId(), amount, null, true);
        }
        
        // –í—ã–¥–∞–µ–º –æ–ø—ã—Ç –ø–∞–Ω–µ–ª–∏
        PlayerProgress playerProgress = getPlayerProgress(player);
        long expReward = (long)(achievement.getExperienceReward() * achievement.getRarity().getRewardMultiplier());
        addPanelExperience(player, expReward);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        String message = String.format("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: %s %s\n%s", 
                                     achievement.getRarity().getIcon(), 
                                     achievement.getName(), 
                                     achievement.getDescription());
        player.sendMessage(message);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (achievement.getRarity().ordinal() >= AchievementRarity.RARE.ordinal()) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            player.sendMessage("‚ú® –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞–Ω—ã!");
        }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
     */
    private static void progressDailyTasks(L2PcInstance player, AchievementType type, int amount) {
        PlayerProgress progress = getPlayerProgress(player);
        
        for (DailyTask task : DAILY_TASKS.values()) {
            if (task.getType() != type) {
                continue;
            }
            
            TaskProgress taskProgress = progress.getDailyTasks().computeIfAbsent(
                task.getId(), k -> new TaskProgress());
            
            if (taskProgress.isCompleted()) {
                continue;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            taskProgress.setProgress(taskProgress.getProgress() + amount);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (taskProgress.getProgress() >= task.getTargetProgress()) {
                completeDailyTask(player, task, taskProgress);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            saveDailyTaskProgress(player.getObjectId(), task.getId(), taskProgress);
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     */
    private static void completeDailyTask(L2PcInstance player, DailyTask task, TaskProgress progress) {
        progress.setCompleted(true);
        
        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        for (ItemHolder reward : task.getRewards()) {
            player.addItem("DailyTask", reward.getId(), reward.getCount(), null, true);
        }
        
        // –í—ã–¥–∞–µ–º –æ–ø—ã—Ç –ø–∞–Ω–µ–ª–∏
        addPanelExperience(player, task.getExperienceReward());
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        String message = String.format("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %s", task.getName());
        player.sendMessage(message);
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–∞–Ω–µ–ª–∏
     */
    private static void addPanelExperience(L2PcInstance player, long experience) {
        PlayerProgress progress = getPlayerProgress(player);
        long oldExp = progress.getPanelExperience();
        int oldLevel = progress.getPanelLevel();
        
        progress.setPanelExperience(oldExp + experience);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        while (progress.getPanelExperience() >= progress.getExperienceForNextLevel()) {
            progress.setPanelLevel(progress.getPanelLevel() + 1);
            player.sendMessage("üÜô –£—Ä–æ–≤–µ–Ω—å –ø–∞–Ω–µ–ª–∏ –ø–æ–≤—ã—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: " + progress.getPanelLevel());
            
            // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            long adenaReward = progress.getPanelLevel() * 100000L;
            player.addAdena("PanelLevelUp", adenaReward, null, true);
            player.sendMessage("üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å: " + String.format("%,d", adenaReward) + " –∞–¥–µ–Ω—ã!");
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private static void saveAchievementProgress(int playerId, int achievementId, AchievementProgress progress) {
        try (Connection con = ConnectionFactory.getInstance().getConnection();
             PreparedStatement ps = con.prepareStatement(INSERT_ACHIEVEMENT)) {
            
            ps.setInt(1, playerId);
            ps.setInt(2, achievementId);
            ps.setInt(3, progress.getProgress());
            ps.setBoolean(4, progress.isCompleted());
            ps.setLong(5, progress.getCompletionDate());
            ps.setInt(6, progress.getProgress());
            ps.setBoolean(7, progress.isCompleted());
            ps.setLong(8, progress.getCompletionDate());
            ps.executeUpdate();
            
        } catch (SQLException e) {
            LOG.error("Error saving achievement progress", e);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     */
    private static void saveDailyTaskProgress(int playerId, int taskId, TaskProgress progress) {
        String today = getTodayString();
        
        try (Connection con = ConnectionFactory.getInstance().getConnection();
             PreparedStatement ps = con.prepareStatement(INSERT_DAILY_TASK)) {
            
            ps.setInt(1, playerId);
            ps.setInt(2, taskId);
            ps.setInt(3, progress.getProgress());
            ps.setBoolean(4, progress.isCompleted());
            ps.setString(5, today);
            ps.setInt(6, progress.getProgress());
            ps.setBoolean(7, progress.isCompleted());
            ps.executeUpdate();
            
        } catch (SQLException e) {
            LOG.error("Error saving daily task progress", e);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
     */
    private static String getTodayString() {
        Calendar cal = Calendar.getInstance();
        return String.format("%04d-%02d-%02d", 
                           cal.get(Calendar.YEAR), 
                           cal.get(Calendar.MONTH) + 1, 
                           cal.get(Calendar.DAY_OF_MONTH));
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static List<Achievement> getVisibleAchievements(L2PcInstance player) {
        PlayerProgress progress = getPlayerProgress(player);
        List<Achievement> visible = new ArrayList<>();
        
        for (Achievement achievement : ALL_ACHIEVEMENTS.values()) {
            if (!achievement.isHidden() || 
                progress.getAchievements().containsKey(achievement.getId())) {
                visible.add(achievement);
            }
        }
        
        return visible;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    public static List<DailyTask> getActiveDailyTasks() {
        return new ArrayList<>(DAILY_TASKS.values());
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    public static Map<String, Object> getPlayerStats(L2PcInstance player) {
        PlayerProgress progress = getPlayerProgress(player);
        Map<String, Object> stats = new HashMap<>();
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        int completedAchievements = (int)progress.getAchievements().values().stream()
                                                 .mapToLong(p -> p.isCompleted() ? 1 : 0)
                                                 .sum();
        
        int completedDailyTasks = (int)progress.getDailyTasks().values().stream()
                                               .mapToLong(p -> p.isCompleted() ? 1 : 0)
                                               .sum();
        
        stats.put("panelLevel", progress.getPanelLevel());
        stats.put("panelExperience", progress.getPanelExperience());
        stats.put("completedAchievements", completedAchievements);
        stats.put("totalAchievements", ALL_ACHIEVEMENTS.size());
        stats.put("completedDailyTasks", completedDailyTasks);
        stats.put("totalDailyTasks", DAILY_TASKS.size());
        stats.put("progressToNextLevel", progress.getProgressToNextLevel());
        
        return stats;
    }
    
    /**
     * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤ –ø–æ–ª–Ω–æ—á—å)
     */
    public static void checkSpecialEvents(L2PcInstance player) {
        Calendar cal = Calendar.getInstance();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (cal.get(Calendar.HOUR_OF_DAY) == 0) {
            progressAchievement(player, AchievementType.SPECIAL, 1);
        }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Ç.–¥.
    }
}