/*
 * Copyright ¬© 2004-2023 L2J Server
 * 
 * This file is part of L2J Server.
 * 
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.gameserver.bbs.service.modules;

import java.util.StringTokenizer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.l2jserver.commons.util.Rnd;
import com.l2jserver.gameserver.config.PlayerPanelConfig;
import com.l2jserver.gameserver.dao.impl.mysql.PlayerPanelDAO;
import com.l2jserver.gameserver.handler.CommunityBoardHandler;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;
import com.l2jserver.gameserver.network.serverpackets.InventoryUpdate;
import com.l2jserver.gameserver.network.serverpackets.MagicSkillUse;
import com.l2jserver.gameserver.network.serverpackets.UserInfo;

/**
 * –ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ç–æ—á–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public class PlayerPanelEnchantModule {
    
    private static final Logger LOG = LoggerFactory.getLogger(PlayerPanelEnchantModule.class);
    
    private final PlayerPanelConfig _config;
    private final PlayerPanelValidator _validator;
    private final PlayerPanelHtmlGenerator _htmlGenerator;
    
    public PlayerPanelEnchantModule(PlayerPanelConfig config) {
        _config = config;
        _validator = new PlayerPanelValidator(config);
        _htmlGenerator = new PlayerPanelHtmlGenerator(config);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ç–æ—á–∫–∏
     */
    public void handleEnchant(L2PcInstance player, StringTokenizer st) {
        if (!_validator.canUseEnchant(player)) {
            showEnchantPanel(player);
            return;
        }
        
        if (!st.hasMoreTokens()) {
            showEnchantPanel(player);
            return;
        }
        
        String action = st.nextToken();
        if (!"item".equals(action)) {
            showEnchantPanel(player);
            return;
        }
        
        if (!st.hasMoreTokens()) {
            showEnchantPanel(player);
            return;
        }
        
        int itemObjId = Integer.parseInt(st.nextToken());
        L2ItemInstance item = player.getInventory().getItemByObjectId(itemObjId);
        
        if (item == null || !item.isEnchantable()) {
            player.sendMessage("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç–æ—á–µ–Ω!");
            showEnchantPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞—Ç–æ—á–∫–∏
        if (!_validator.canEnchantItem(player, item.getId())) {
            showEnchantPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if (item.getEnchantLevel() >= _config.getMaxEnchantLevel()) {
            player.sendMessage("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏!");
            showEnchantPanel(player);
            return;
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤–∏—Ç–∫–æ–≤
        L2ItemInstance scroll = findEnchantScroll(player, item);
        if (scroll == null) {
            player.sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤–∏—Ç–∫–æ–≤ –∑–∞—Ç–æ—á–∫–∏!");
            showEnchantPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        long cost = calculateEnchantCost(item);
        if (player.getAdena() < cost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –∑–∞—Ç–æ—á–∫–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è: " + formatNumber(cost));
            showEnchantPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (PlayerPanelDAO.hasCooldown(player.getObjectId(), "enchant")) {
            player.sendMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ç–æ—á–∫–æ–π!");
            showEnchantPanel(player);
            return;
        }
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—Ç–æ—á–∫–∏
        performEnchant(player, item, scroll, cost);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–≤–∏—Ç–æ–∫ –∑–∞—Ç–æ—á–∫–∏
     */
    private L2ItemInstance findEnchantScroll(L2PcInstance player, L2ItemInstance item) {
        // –ò—â–µ–º —Å–≤–∏—Ç–∫–∏ –∑–∞—Ç–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        for (L2ItemInstance scroll : player.getInventory().getItems()) {
            if (isEnchantScroll(scroll, item)) {
                return scroll;
            }
        }
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–≤–∏—Ç–∫–æ–º –∑–∞—Ç–æ—á–∫–∏
     */
    private boolean isEnchantScroll(L2ItemInstance scroll, L2ItemInstance targetItem) {
        String scrollName = scroll.getName().toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if (!scrollName.contains("enchant") && !scrollName.contains("scroll")) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–≤–∏—Ç–∫–∞ (–æ—Ä—É–∂–∏–µ/–±—Ä–æ–Ω—è)
        if (targetItem.isWeapon()) {
            return scrollName.contains("weapon") || scrollName.contains("w_");
        } else if (targetItem.isArmor()) {
            return scrollName.contains("armor") || scrollName.contains("a_");
        }
        
        return true;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ç–æ—á–∫–∏
     */
    private long calculateEnchantCost(L2ItemInstance item) {
        long baseCost = _config.getEnchantBaseCost();
        int enchantLevel = item.getEnchantLevel();
        
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—Ä–æ–≤–Ω–µ–º –∑–∞—Ç–æ—á–∫–∏
        double multiplier = 1.0 + (enchantLevel * 0.5);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        if (enchantLevel >= 10) {
            multiplier *= 2.0;
        }
        if (enchantLevel >= 15) {
            multiplier *= 3.0;
        }
        
        return (long)(baseCost * multiplier);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞—Ç–æ—á–∫—É
     */
    private void performEnchant(L2PcInstance player, L2ItemInstance item, L2ItemInstance scroll, long cost) {
        int currentEnchant = item.getEnchantLevel();
        int successRate = getEnchantSuccessRate(currentEnchant);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        String itemName = item.getName();
        int itemId = item.getId();
        int scrollId = scroll.getId();
        String scrollName = scroll.getName();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞—Ç–æ—á–∫–∏
        boolean success = Rnd.get(100) < successRate;
        
        // –°–Ω—è—Ç–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–≤–∏—Ç–∫–∞
        player.reduceAdena("Enchant", cost, null, true);
        player.destroyItem("Enchant", scroll, 1, null, false);
        
        if (success) {
            // –£—Å–ø–µ—à–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞
            item.setEnchantLevel(currentEnchant + 1);
            item.updateDatabase();
            
            player.sendMessage("üéâ –ó–∞—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–∞! " + itemName + " —Ç–µ–ø–µ—Ä—å +" + item.getEnchantLevel());
            
            // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (_config.isVisualEffectsEnabled()) {
                player.broadcastPacket(new MagicSkillUse(player, player, 2025, 1, 1, 0));
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            PlayerPanelDAO.logEnchant(player, itemId, item.getObjectId(), itemName, 
                                    currentEnchant, item.getEnchantLevel(), true, 
                                    scrollId, scrollName, cost);
        } else {
            // –ù–µ—É–¥–∞—á–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞
            int newEnchant = currentEnchant;
            if (_config.canEnchantBreak() && currentEnchant > _config.getEnchantSafeLevel()) {
                // –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ç–æ—á–∫–∏
                int decrease = calculateEnchantDecrease(currentEnchant);
                newEnchant = Math.max(0, currentEnchant - decrease);
                item.setEnchantLevel(newEnchant);
                item.updateDatabase();
                
                if (newEnchant < currentEnchant) {
                    player.sendMessage("üí• –ó–∞—Ç–æ—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! " + itemName + " –ø–æ–Ω–∏–∂–µ–Ω –¥–æ +" + newEnchant);
                } else {
                    player.sendMessage("üòî –ó–∞—Ç–æ—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª.");
                }
            } else {
                player.sendMessage("üòî –ó–∞—Ç–æ—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π.");
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            PlayerPanelDAO.logEnchant(player, itemId, item.getObjectId(), itemName, 
                                    currentEnchant, newEnchant, false, 
                                    scrollId, scrollName, cost);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        InventoryUpdate iu = new InventoryUpdate();
        iu.addModifiedItem(item);
        player.sendPacket(iu);
        player.sendPacket(new UserInfo(player));
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (_config.getPanelCooldown() > 0) {
            PlayerPanelDAO.setCooldown(player.getObjectId(), "enchant", _config.getPanelCooldown() * 60000);
        }
        
        showEnchantPanel(player);
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ç–æ—á–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
     */
    private int calculateEnchantDecrease(int currentEnchant) {
        if (currentEnchant >= 15) {
            return Rnd.get(2, 4); // –°–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
        } else if (currentEnchant >= 10) {
            return Rnd.get(1, 3); // –°—Ä–µ–¥–Ω–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ
        } else {
            return Rnd.get(1, 2); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –∑–∞—Ç–æ—á–∫–∏
     */
    private int getEnchantSuccessRate(int currentEnchant) {
        if (currentEnchant < 4) {
            return _config.getEnchantSuccessRate1();
        } else if (currentEnchant < 10) {
            return _config.getEnchantSuccessRate5();
        } else if (currentEnchant < 15) {
            return _config.getEnchantSuccessRate10();
        } else {
            return _config.getEnchantSuccessRate15();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞—Ç–æ—á–∫–∏
     */
    private void showEnchantPanel(L2PcInstance player) {
        String html = _htmlGenerator.generateMainPanel(player, "enchant");
        CommunityBoardHandler.separateAndSend(html, player);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ
     */
    private String formatNumber(long number) {
        if (number >= 1000000000) {
            return String.format("%.1fB", number / 1000000000.0);
        } else if (number >= 1000000) {
            return String.format("%.1fM", number / 1000000.0);
        } else if (number >= 1000) {
            return String.format("%.1fK", number / 1000.0);
        } else {
            return String.valueOf(number);
        }
    }
}