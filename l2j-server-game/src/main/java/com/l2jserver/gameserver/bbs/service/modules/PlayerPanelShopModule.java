/*
 * Copyright ¬© 2004-2023 L2J Server
 * 
 * This file is part of L2J Server.
 * 
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.gameserver.bbs.service.modules;

import java.util.StringTokenizer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.l2jserver.gameserver.config.PlayerPanelConfig;
import com.l2jserver.gameserver.dao.impl.mysql.PlayerPanelDAO;
import com.l2jserver.gameserver.handler.CommunityBoardHandler;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;

/**
 * –ú–æ–¥—É–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public class PlayerPanelShopModule {
    
    private static final Logger LOG = LoggerFactory.getLogger(PlayerPanelShopModule.class);
    
    private final PlayerPanelConfig _config;
    private final PlayerPanelValidator _validator;
    private final PlayerPanelHtmlGenerator _htmlGenerator;
    
    public PlayerPanelShopModule(PlayerPanelConfig config) {
        _config = config;
        _validator = new PlayerPanelValidator(config);
        _htmlGenerator = new PlayerPanelHtmlGenerator(config);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
     */
    public void handleShop(L2PcInstance player, StringTokenizer st) {
        if (!_validator.canUseShop(player)) {
            showShopPanel(player);
            return;
        }
        
        if (!st.hasMoreTokens()) {
            showShopPanel(player);
            return;
        }
        
        String action = st.nextToken();
        if (!"buy".equals(action)) {
            showShopPanel(player);
            return;
        }
        
        if (!st.hasMoreTokens()) {
            showShopPanel(player);
            return;
        }
        
        String itemId = st.nextToken();
        if (!st.hasMoreTokens()) {
            showShopPanel(player);
            return;
        }
        
        long price = Long.parseLong(st.nextToken());
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        if (!_validator.isItemAvailableInShop(itemId)) {
            player.sendMessage("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!");
            showShopPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥
        if (player.getAdena() < price) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –ø–æ–∫—É–ø–∫–∏!");
            showShopPanel(player);
            return;
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞
        int realItemId = getItemIdByShopId(itemId);
        if (realItemId == 0) {
            player.sendMessage("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            showShopPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (PlayerPanelDAO.hasCooldown(player.getObjectId(), "shop")) {
            player.sendMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–æ–π!");
            showShopPanel(player);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if (player.getInventory().getSize() >= player.getInventoryLimit()) {
            player.sendMessage("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω!");
            showShopPanel(player);
            return;
        }
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        performPurchase(player, realItemId, itemId, price);
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É
     */
    private void performPurchase(L2PcInstance player, int realItemId, String shopItemId, long price) {
        // –°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥
        player.reduceAdena("Shop", price, null, true);
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        int quantity = getItemQuantity(shopItemId);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        L2ItemInstance newItem = player.addItem("Shop", realItemId, quantity, null, true);
        String itemName = newItem != null ? newItem.getName() : "Unknown Item";
        
        if (quantity > 1) {
            player.sendMessage("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! " + itemName + " x" + quantity + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.");
        } else {
            player.sendMessage("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! " + itemName + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        handleSpecialItems(player, realItemId, quantity);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        PlayerPanelDAO.logPurchase(player, realItemId, itemName, quantity, price / quantity, price, "adena");
        PlayerPanelDAO.logAction(player, "shop_buy", "Bought " + itemName + " x" + quantity + " for " + price + " adena", price, true);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (_config.getAntiSpamInterval() > 0) {
            PlayerPanelDAO.setCooldown(player.getObjectId(), "shop", _config.getAntiSpamInterval() * 1000);
        }
        
        showShopPanel(player);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    private void handleSpecialItems(L2PcInstance player, int itemId, int quantity) {
        switch (itemId) {
            case 1060: // Healing Potion
                if (quantity >= 10) {
                    player.sendMessage("üéÅ –ë–æ–Ω—É—Å! –ü–æ–ª—É—á–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É –∑–µ–ª–∏–π!");
                    player.addExpAndSp(1000, 100);
                }
                break;
            case 729: // Enchant Scroll
                if (quantity >= 5) {
                    player.sendMessage("üéÅ –ë–æ–Ω—É—Å! –ü–æ–ª—É—á–µ–Ω –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–π —Å–≤–∏—Ç–æ–∫ –∑–∞ –ø–æ–∫—É–ø–∫—É –æ–±—ã—á–Ω—ã—Ö!");
                    player.addItem("Bonus", 6569, 1, null, true); // Blessed Enchant Scroll
                }
                break;
            default:
                break;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private int getItemQuantity(String shopItemId) {
        switch (shopItemId) {
            case "3": // Enchant Scroll
            case "10": // Blessed Scroll
                return 1;
            case "4": // Healing Potion
                return 10;
            case "6": // Soul Crystal
                return 5;
            default:
                return 1;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private int getItemIdByShopId(String shopId) {
        switch (shopId) {
            case "1": return 2; // Sword
            case "2": return 23; // Leather Armor
            case "3": return 729; // Weapon Enchant Scroll
            case "4": return 1060; // Lesser Healing Potion
            case "5": return 881; // Ring
            case "6": return 1458; // Crystal
            case "7": return 4; // Bow
            case "8": return 224; // Dagger
            case "9": return 1403; // Staff
            case "10": return 6569; // Blessed Enchant Scroll
            default: return 0;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private String getItemNameByShopId(String shopId) {
        switch (shopId) {
            case "1": return "Demon Sword";
            case "2": return "Mithril Armor";
            case "3": return "Enchant Scroll";
            case "4": return "Healing Potion";
            case "5": return "Power Ring";
            case "6": return "Soul Crystal";
            case "7": return "Elven Bow";
            case "8": return "Dagger Set";
            case "9": return "Magic Staff";
            case "10": return "Blessed Scroll";
            default: return "Unknown Item";
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    private double getPlayerDiscount(L2PcInstance player) {
        double discount = 0.0;
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
        double premiumDiscount = _config.getPremiumDiscount();
        if (premiumDiscount > 0 && player.hasPremiumStatus()) {
            discount += premiumDiscount / 100.0;
        }
        
        // –°–∫–∏–¥–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π
        if (_config.isEventsEnabled()) {
            double eventDiscount = _config.getEventDiscount();
            if (eventDiscount > 0 && isEventActive()) {
                discount += eventDiscount / 100.0;
            }
        }
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (player.getClan() != null && player.getClan().getLevel() >= 5) {
            discount += 0.05; // 5% —Å–∫–∏–¥–∫–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤ 5+ —É—Ä–æ–≤–Ω—è
        }
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 50%
        return Math.min(discount, 0.5);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ
     */
    private boolean isEventActive() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç –∏–ª–∏ —Ñ–ª–∞–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        return false;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
     */
    private long calculateFinalPrice(L2PcInstance player, long basePrice) {
        double discount = getPlayerDiscount(player);
        
        if (discount > 0) {
            long discountedPrice = (long)(basePrice * (1.0 - discount));
            player.sendMessage("üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ " + String.format("%.0f", discount * 100) + "%!");
            return discountedPrice;
        }
        
        return basePrice;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–∫—É–ø–æ–∫
     */
    private boolean checkPurchaseLimits(L2PcInstance player, long price) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–æ–∫
        long dailyLimit = _config.getDailyPurchaseLimit();
        if (dailyLimit > 0) {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã –∑–∞ –¥–µ–Ω—å
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
        double taxRate = _config.getPurchaseTax();
        if (taxRate > 0) {
            long tax = (long)(price * taxRate / 100.0);
            if (player.getAdena() < price + tax) {
                player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –Ω–∞–ª–æ–≥–æ–º! –ù–∞–ª–æ–≥: " + tax + " Adena");
                return false;
            }
            
            // –°–Ω—è—Ç–∏–µ –Ω–∞–ª–æ–≥–∞
            player.reduceAdena("Tax", tax, null, true);
            player.sendMessage("üí∞ –£–ø–ª–∞—á–µ–Ω –Ω–∞–ª–æ–≥: " + tax + " Adena");
        }
        
        return true;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞
     */
    private void showShopPanel(L2PcInstance player) {
        String html = _htmlGenerator.generateMainPanel(player, "shop");
        CommunityBoardHandler.separateAndSend(html, player);
    }
}