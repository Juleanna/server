/*
 * Copyright ¬© 2004-2023 L2J Server
 * 
 * This file is part of L2J Server.
 * 
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.gameserver.bbs.service.modules;

import java.util.StringTokenizer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.l2jserver.gameserver.config.PlayerPanelConfig;
import com.l2jserver.gameserver.dao.impl.mysql.PlayerPanelDAO;
import com.l2jserver.gameserver.datatables.SkillData;
import com.l2jserver.gameserver.handler.CommunityBoardHandler;
import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;
import com.l2jserver.gameserver.model.skills.Skill;
import com.l2jserver.gameserver.network.serverpackets.MagicSkillUse;

/**
 * –ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –±–∞—Ñ–æ–≤ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public class PlayerPanelBuffModule {
    
    private static final Logger LOG = LoggerFactory.getLogger(PlayerPanelBuffModule.class);
    
    private final PlayerPanelConfig _config;
    private final PlayerPanelValidator _validator;
    private final PlayerPanelHtmlGenerator _htmlGenerator;
    
    public PlayerPanelBuffModule(PlayerPanelConfig config) {
        _config = config;
        _validator = new PlayerPanelValidator(config);
        _htmlGenerator = new PlayerPanelHtmlGenerator(config);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ñ–æ–≤
     */
    public void handleBuffs(L2PcInstance player, StringTokenizer st) {
        if (!_validator.canUseBuffs(player)) {
            showBuffsPanel(player);
            return;
        }
        
        if (!st.hasMoreTokens()) {
            showBuffsPanel(player);
            return;
        }
        
        String action = st.nextToken();
        
        switch (action) {
            case "add":
                if (st.hasMoreTokens()) {
                    int skillId = Integer.parseInt(st.nextToken());
                    addBuff(player, skillId);
                }
                break;
            case "remove":
                if (st.hasMoreTokens()) {
                    int skillId = Integer.parseInt(st.nextToken());
                    removeBuff(player, skillId);
                }
                break;
            case "refresh":
                refreshAllBuffs(player);
                break;
            case "scheme":
                if (st.hasMoreTokens()) {
                    String schemeName = st.nextToken();
                    applyBuffScheme(player, schemeName);
                }
                break;
            default:
                showBuffsPanel(player);
                return;
        }
        
        showBuffsPanel(player);
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ñ
     */
    private void addBuff(L2PcInstance player, int skillId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞—Ñ–∞
        if (!_validator.isBuffAvailable(skillId)) {
            player.sendMessage("–≠—Ç–æ—Ç –±–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            return;
        }
        
        long cost = calculateBuffCost(player, skillId);
        
        if (player.getAdena() < cost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–∞!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –±–∞—Ñ
        if (player.getFirstEffect(skillId) != null) {
            player.sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –±–∞—Ñ!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (PlayerPanelDAO.hasCooldown(player.getObjectId(), "buff")) {
            player.sendMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ñ–∞!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞—Ñ–æ–≤
        if (getActiveBuffsCount(player) >= getMaxBuffsLimit(player)) {
            player.sendMessage("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤!");
            return;
        }
        
        // –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏
        player.reduceAdena("Buff", cost, null, true);
        
        // –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ñ
        Skill skill = SkillData.getInstance().getSkill(skillId, getBuffLevel(skillId));
        if (skill != null) {
            int duration = calculateBuffDuration(player, skillId);
            skill.applyEffects(player, player, false, duration);
            
            player.sendMessage("‚ú® –ë–∞—Ñ " + skill.getName() + " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
            
            // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (_config.isVisualEffectsEnabled()) {
                player.broadcastPacket(new MagicSkillUse(player, player, skillId, 1, 1, 0));
            }
            
            // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (_config.isSoundEffectsEnabled()) {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            PlayerPanelDAO.logBuff(player, skillId, skill.getName(), getBuffLevel(skillId), cost, duration);
            PlayerPanelDAO.logAction(player, "buff_add", "Added buff " + skill.getName(), cost, true);
        } else {
            player.sendMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–∞—Ñ–∞!");
            player.addAdena("BuffRefund", cost, null, true); // –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (_config.getAntiSpamInterval() > 0) {
            PlayerPanelDAO.setCooldown(player.getObjectId(), "buff", _config.getAntiSpamInterval() * 1000);
        }
    }
    
    /**
     * –£–±—Ä–∞—Ç—å –±–∞—Ñ
     */
    private void removeBuff(L2PcInstance player, int skillId) {
        if (player.getFirstEffect(skillId) == null) {
            player.sendMessage("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∞—Ñ–∞!");
            return;
        }
        
        player.stopSkillEffects(skillId);
        player.sendMessage("‚ùå –ë–∞—Ñ —É–±—Ä–∞–Ω!");
        
        PlayerPanelDAO.logAction(player, "buff_remove", "Removed buff " + skillId, 0, true);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–∞—Ñ—ã
     */
    private void refreshAllBuffs(L2PcInstance player) {
        long cost = calculateRefreshCost(player);
        
        if (player.getAdena() < cost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (PlayerPanelDAO.hasCooldown(player.getObjectId(), "buff_refresh")) {
            player.sendMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞—Ñ–æ–≤!");
            return;
        }
        
        // –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏
        player.reduceAdena("BuffRefresh", cost, null, true);
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ñ—ã
        String[] availableBuffs = _config.getAvailableBuffs().split(",");
        int buffCount = 0;
        int failedCount = 0;
        
        for (String buffIdStr : availableBuffs) {
            try {
                int skillId = Integer.parseInt(buffIdStr.trim());
                Skill skill = SkillData.getInstance().getSkill(skillId, getBuffLevel(skillId));
                if (skill != null) {
                    int duration = calculateBuffDuration(player, skillId);
                    skill.applyEffects(player, player, false, duration);
                    buffCount++;
                } else {
                    failedCount++;
                }
            } catch (NumberFormatException e) {
                LOG.warn("Invalid buff ID in config: {}", buffIdStr);
                failedCount++;
            }
        }
        
        if (buffCount > 0) {
            player.sendMessage("üîÑ –í—Å–µ –±–∞—Ñ—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü–æ–ª—É—á–µ–Ω–æ –±–∞—Ñ–æ–≤: " + buffCount);
            if (failedCount > 0) {
                player.sendMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å " + failedCount + " –±–∞—Ñ–æ–≤.");
            }
        } else {
            player.sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ñ–∞!");
            player.addAdena("BuffRefreshRefund", cost, null, true); // –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥
            return;
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (_config.isVisualEffectsEnabled()) {
            player.broadcastPacket(new MagicSkillUse(player, player, 2024, 1, 1, 0));
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        PlayerPanelDAO.logAction(player, "buff_refresh", "Refreshed all buffs, count: " + buffCount, cost, true);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        PlayerPanelDAO.setCooldown(player.getObjectId(), "buff_refresh", 5 * 60000); // 5 –º–∏–Ω—É—Ç
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É –±–∞—Ñ–æ–≤
     */
    private void applyBuffScheme(L2PcInstance player, String schemeName) {
        BuffScheme scheme = getBuffScheme(schemeName);
        if (scheme == null) {
            player.sendMessage("–°—Ö–µ–º–∞ –±–∞—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }
        
        long cost = calculateSchemeCost(player, scheme);
        if (player.getAdena() < cost) {
            player.sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Adena –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞—Ñ–æ–≤!");
            return;
        }
        
        // –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏
        player.reduceAdena("BuffScheme", cost, null, true);
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞—Ñ—ã —Å—Ö–µ–º—ã
        int appliedCount = 0;
        for (int skillId : scheme.getSkillIds()) {
            if (_validator.isBuffAvailable(skillId)) {
                Skill skill = SkillData.getInstance().getSkill(skillId, getBuffLevel(skillId));
                if (skill != null) {
                    int duration = calculateBuffDuration(player, skillId);
                    skill.applyEffects(player, player, false, duration);
                    appliedCount++;
                }
            }
        }
        
        player.sendMessage("üéØ –°—Ö–µ–º–∞ '" + scheme.getName() + "' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! –ë–∞—Ñ–æ–≤: " + appliedCount);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        PlayerPanelDAO.logAction(player, "buff_scheme", "Applied scheme " + schemeName + ", buffs: " + appliedCount, cost, true);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –±–∞—Ñ–æ–≤
     */
    private BuffScheme getBuffScheme(String schemeName) {
        // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –±–∞—Ñ–æ–≤
        switch (schemeName.toLowerCase()) {
            case "warrior":
                return new BuffScheme("Warrior", new int[]{1040, 1068, 1077, 1086, 1204}); // Might, Focus, Haste, Wind Walk
            case "mage":
                return new BuffScheme("Mage", new int[]{1045, 1048, 1059, 1085, 1240}); // Shield, Blessed Body, Empower, Acumen, Guidance
            case "support":
                return new BuffScheme("Support", new int[]{1045, 1048, 1240, 1243, 1303}); // Shield, Blessed Body, Guidance, Bless Shield
            case "pvp":
                return new BuffScheme("PvP", new int[]{1040, 1068, 1077, 1086, 1242}); // Might, Focus, Haste, Death Whisper
            case "farm":
                return new BuffScheme("Farm", new int[]{1040, 1045, 1204, 1240, 1303}); // Might, Shield, Wind Walk, Guidance
            default:
                return null;
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞—Ñ–∞
     */
    private long calculateBuffCost(L2PcInstance player, int skillId) {
        long baseCost = _config.getBuffCost();
        
        // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∞—Ñ–∞
        if (isHighTierBuff(skillId)) {
            baseCost *= 2; // –î–æ—Ä–æ–≥–∏–µ –±–∞—Ñ—ã
        }
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
        if (player.hasPremiumStatus()) {
            baseCost = (long)(baseCost * 0.8); // 20% —Å–∫–∏–¥–∫–∞
        }
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –∫–ª–∞–Ω–∞
        if (player.getClan() != null && player.getClan().getLevel() >= 5) {
            baseCost = (long)(baseCost * 0.9); // 10% —Å–∫–∏–¥–∫–∞
        }
        
        return baseCost;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤
     */
    private long calculateRefreshCost(L2PcInstance player) {
        long baseCost = _config.getBuffRefreshCost();
        
        // –°–∫–∏–¥–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤
        int activeBuffs = getActiveBuffsCount(player);
        if (activeBuffs > 5) {
            baseCost = (long)(baseCost * 1.5); // –î–æ—Ä–æ–∂–µ, –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤
        }
        
        // –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
        if (player.hasPremiumStatus()) {
            baseCost = (long)(baseCost * 0.7); // 30% —Å–∫–∏–¥–∫–∞
        }
        
        return baseCost;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ö–µ–º—ã –±–∞—Ñ–æ–≤
     */
    private long calculateSchemeCost(L2PcInstance player, BuffScheme scheme) {
        long totalCost = 0;
        
        for (int skillId : scheme.getSkillIds()) {
            totalCost += calculateBuffCost(player, skillId);
        }
        
        // –°–∫–∏–¥–∫–∞ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
        totalCost = (long)(totalCost * 0.8); // 20% —Å–∫–∏–¥–∫–∞ –∑–∞ —Å—Ö–µ–º—É
        
        return totalCost;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞—Ñ–∞
     */
    private int calculateBuffDuration(L2PcInstance player, int skillId) {
        int baseDuration = _config.getBuffDuration();
        
        // –ë–æ–Ω—É—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
        if (player.hasPremiumStatus()) {
            baseDuration = (int)(baseDuration * 1.5); // +50% –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }
        
        // –ë–æ–Ω—É—Å –¥–ª—è –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (player.getLevel() >= 76) {
            baseDuration = (int)(baseDuration * 1.2); // +20% –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }
        
        return baseDuration;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–∞—Ñ–∞
     */
    private int getBuffLevel(int skillId) {
        // –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å 1
        // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ñ–∞
        switch (skillId) {
            case 1040: // Shield
            case 1045: // Blessed Body
                return 6; // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –±–∞—Ñ–æ–≤
            case 1068: // Might
            case 1077: // Focus
                return 3; // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–æ–µ–≤—ã—Ö –±–∞—Ñ–æ–≤
            default:
                return 1; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∞—Ñ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    private boolean isHighTierBuff(int skillId) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Ä–æ–≥–∏–µ –±–∞—Ñ—ã
        switch (skillId) {
            case 1240: // Guidance
            case 1242: // Death Whisper
            case 1243: // Bless Shield
            case 1303: // Wild Magic
            case 1304: // Advanced Block
                return true;
            default:
                return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤
     */
    private int getActiveBuffsCount(L2PcInstance player) {
        return player.getEffectList().getBuffCount();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –±–∞—Ñ–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    private int getMaxBuffsLimit(L2PcInstance player) {
        int baseLimit = 20; // –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
        
        // –ë–æ–Ω—É—Å –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
        if (player.hasPremiumStatus()) {
            baseLimit += 4;
        }
        
        // –ë–æ–Ω—É—Å –¥–ª—è –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (player.getLevel() >= 76) {
            baseLimit += 2;
        }
        
        return baseLimit;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –±–∞—Ñ–æ–≤
     */
    private void showBuffsPanel(L2PcInstance player) {
        String html = _htmlGenerator.generateMainPanel(player, "buffs");
        CommunityBoardHandler.separateAndSend(html, player);
    }
    
    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ö–µ–º –±–∞—Ñ–æ–≤
     */
    private static class BuffScheme {
        private final String name;
        private final int[] skillIds;
        
        public BuffScheme(String name, int[] skillIds) {
            this.name = name;
            this.skillIds = skillIds;
        }
        
        public String getName() {
            return name;
        }
        
        public int[] getSkillIds() {
            return skillIds;
        }
    }
}