/*
 * Copyright ¬© 2004-2023 L2J Server
 * 
 * This file is part of L2J Server.
 * 
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.gameserver.bbs.service.modules;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import com.l2jserver.gameserver.model.actor.instance.L2PcInstance;

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
 * @author YourName
 */
public final class PlayerPanelUtils {
    
    private static final DecimalFormat NUMBER_FORMAT = new DecimalFormat("#,###");
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd.MM.yyyy HH:mm");
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —É—Ç–∏–ª–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private PlayerPanelUtils() {
        // –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static String formatNumber(long number) {
        if (number >= 1_000_000_000_000L) {
            return String.format("%.1fT", number / 1_000_000_000_000.0);
        } else if (number >= 1_000_000_000L) {
            return String.format("%.1fB", number / 1_000_000_000.0);
        } else if (number >= 1_000_000L) {
            return String.format("%.1fM", number / 1_000_000.0);
        } else if (number >= 1_000L) {
            return String.format("%.1fK", number / 1_000.0);
        } else {
            return NUMBER_FORMAT.format(number);
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    public static String formatTime(long milliseconds) {
        if (milliseconds <= 0) {
            return "0—Å";
        }
        
        long seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds);
        long hours = TimeUnit.MILLISECONDS.toHours(milliseconds);
        long days = TimeUnit.MILLISECONDS.toDays(milliseconds);
        
        if (days > 0) {
            return days + "–¥ " + (hours % 24) + "—á";
        } else if (hours > 0) {
            return hours + "—á " + (minutes % 60) + "–º";
        } else if (minutes > 0) {
            return minutes + "–º " + (seconds % 60) + "—Å";
        } else {
            return seconds + "—Å";
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    public static String formatDate(long timestamp) {
        return DATE_FORMAT.format(new Date(timestamp));
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     */
    public static String formatPercent(double value) {
        return String.format("%.1f%%", value);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
     */
    public static String getItemIcon(String itemName) {
        String name = itemName.toLowerCase();
        
        if (name.contains("sword") || name.contains("blade")) {
            return "‚öîÔ∏è";
        } else if (name.contains("bow") || name.contains("crossbow")) {
            return "üèπ";
        } else if (name.contains("staff") || name.contains("wand")) {
            return "ü™Ñ";
        } else if (name.contains("dagger") || name.contains("knife")) {
            return "üó°Ô∏è";
        } else if (name.contains("hammer") || name.contains("mace")) {
            return "üî®";
        } else if (name.contains("armor") || name.contains("plate")) {
            return "üõ°Ô∏è";
        } else if (name.contains("helmet") || name.contains("hat")) {
            return "‚õëÔ∏è";
        } else if (name.contains("boots") || name.contains("shoes")) {
            return "üë¢";
        } else if (name.contains("gloves") || name.contains("gauntlets")) {
            return "üß§";
        } else if (name.contains("ring")) {
            return "üíç";
        } else if (name.contains("earring") || name.contains("ear")) {
            return "üíé";
        } else if (name.contains("necklace") || name.contains("neck")) {
            return "üìø";
        } else if (name.contains("scroll")) {
            return "üìú";
        } else if (name.contains("potion") || name.contains("elixir")) {
            return "üß™";
        } else if (name.contains("crystal") || name.contains("gem")) {
            return "üíé";
        } else if (name.contains("book") || name.contains("tome")) {
            return "üìñ";
        } else if (name.contains("key")) {
            return "üóùÔ∏è";
        } else if (name.contains("food") || name.contains("bread")) {
            return "üçû";
        } else {
            return "üì¶";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∫–∏–ª–ª–∞ –ø–æ —Ç–∏–ø—É
     */
    public static String getSkillIcon(String skillName) {
        String name = skillName.toLowerCase();
        
        if (name.contains("heal") || name.contains("cure")) {
            return "‚ù§Ô∏è‚Äçü©π";
        } else if (name.contains("shield") || name.contains("guard")) {
            return "üõ°Ô∏è";
        } else if (name.contains("might") || name.contains("power")) {
            return "üí™";
        } else if (name.contains("magic") || name.contains("spell")) {
            return "üîÆ";
        } else if (name.contains("haste") || name.contains("speed")) {
            return "‚ö°";
        } else if (name.contains("wind") || name.contains("air")) {
            return "üå™Ô∏è";
        } else if (name.contains("fire") || name.contains("flame")) {
            return "üî•";
        } else if (name.contains("ice") || name.contains("frost")) {
            return "‚ùÑÔ∏è";
        } else if (name.contains("death") || name.contains("dark")) {
            return "üíÄ";
        } else if (name.contains("light") || name.contains("divine")) {
            return "‚ú®";
        } else if (name.contains("focus") || name.contains("concentration")) {
            return "üéØ";
        } else if (name.contains("guidance") || name.contains("blessing")) {
            return "üåü";
        } else {
            return "üìñ";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    public static String getItemQualityColor(int enchantLevel) {
        if (enchantLevel >= 15) {
            return "#ff6b35"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        } else if (enchantLevel >= 10) {
            return "#ffd700"; // –ó–æ–ª–æ—Ç–æ–π
        } else if (enchantLevel >= 5) {
            return "#00ff00"; // –ó–µ–ª–µ–Ω—ã–π
        } else if (enchantLevel > 0) {
            return "#87ceeb"; // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
        } else {
            return "#ffffff"; // –ë–µ–ª—ã–π
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º–µ–Ω–∏
     */
    public static String getOnlineTimeStatus(long onlineTime) {
        long hours = TimeUnit.MILLISECONDS.toHours(onlineTime);
        
        if (hours >= 100) {
            return "üèÜ –í–µ—Ç–µ—Ä–∞–Ω";
        } else if (hours >= 50) {
            return "‚≠ê –ê–∫—Ç–∏–≤–Ω—ã–π";
        } else if (hours >= 20) {
            return "üëç –†–µ–≥—É–ª—è—Ä–Ω—ã–π";
        } else if (hours >= 5) {
            return "üå± –ù–æ–≤–∏—á–æ–∫";
        } else {
            return "üë∂ –ù–∞—á–∏–Ω–∞—é—â–∏–π";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–≥ PvP
     */
    public static String getPvPRank(int pvpKills) {
        if (pvpKills >= 1000) {
            return "üëë –õ–µ–≥–µ–Ω–¥–∞";
        } else if (pvpKills >= 500) {
            return "üèÜ –ú–∞—Å—Ç–µ—Ä";
        } else if (pvpKills >= 200) {
            return "‚öîÔ∏è –í–æ–∏–Ω";
        } else if (pvpKills >= 50) {
            return "üó°Ô∏è –ë–æ–µ—Ü";
        } else if (pvpKills >= 10) {
            return "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫";
        } else {
            return "üå± –ú–∏—Ä–Ω—ã–π";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ä–º—ã
     */
    public static String getKarmaStatus(int karma) {
        if (karma <= 0) {
            return "üòá –ü—Ä–∞–≤–µ–¥–Ω—ã–π";
        } else if (karma <= 100) {
            return "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π";
        } else if (karma <= 500) {
            return "üò† –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π";
        } else {
            return "üëπ –£–±–∏–π—Ü–∞";
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
     */
    public static int calculatePlayerRating(L2PcInstance player) {
        int rating = 0;
        
        // –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        rating += player.getLevel() * 10;
        
        // PvP —É–±–∏–π—Å—Ç–≤–∞
        rating += player.getPvpKills() * 5;
        
        // –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω
        long hoursOnline = TimeUnit.MILLISECONDS.toHours(player.getOnlineTime());
        rating += (int)(hoursOnline * 2);
        
        // –®—Ç—Ä–∞—Ñ –∑–∞ –∫–∞—Ä–º—É
        if (player.getKarma() > 0) {
            rating -= player.getKarma() / 10;
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –∫–ª–∞–Ω
        if (player.getClan() != null) {
            rating += player.getClan().getLevel() * 20;
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ç—É—Å –≥–µ—Ä–æ—è/–Ω–æ–±–ª–∞
        if (player.isHero()) {
            rating += 1000;
        }
        if (player.isNoble()) {
            rating += 500;
        }
        
        return Math.max(0, rating);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –Ω–æ–≤–∏—á–∫–æ–º
     */
    public static boolean isNewbie(L2PcInstance player) {
        return player.getLevel() < 40 || 
               TimeUnit.MILLISECONDS.toHours(player.getOnlineTime()) < 10;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤–µ—Ç–µ—Ä–∞–Ω–æ–º
     */
    public static boolean isVeteran(L2PcInstance player) {
        return player.getLevel() >= 76 && 
               TimeUnit.MILLISECONDS.toHours(player.getOnlineTime()) >= 100;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static String getRandomGreeting(L2PcInstance player) {
        String[] greetings = {
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + player.getName() + "!",
            "–ü—Ä–∏–≤–µ—Ç, " + player.getName() + "! –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?",
            "–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞, " + player.getName() + "!",
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, " + player.getName() + "!",
            "–£–¥–∞—á–Ω–æ–π –æ—Ö–æ—Ç—ã, " + player.getName() + "!"
        };
        
        int index = (int)(System.currentTimeMillis() % greetings.length);
        return greetings[index];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static String getTipOfTheDay() {
        String[] tips = {
            "üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –≤–∞—Ä–µ—Ö–∞—É—Å–µ!",
            "üí° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–ª–∞–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!",
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–∏—Ç–∫–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞—Ç–æ—á–∫–∏!",
            "üí° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥!",
            "üí° –ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —É–º–µ–Ω–∏—è —É –ù–ü–¶-—É—á–∏—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–∞—Ö!",
            "üí° –¢–æ—Ä–≥—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!",
            "üí° –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!",
            "üí° –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ—Ö–æ—Ç—ã!"
        };
        
        int dayOfYear = (int)(System.currentTimeMillis() / (24 * 60 * 60 * 1000)) % tips.length;
        return tips[dayOfYear];
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞
     */
    public static int safeParseInt(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ long
     */
    public static long safeParseLong(String value, long defaultValue) {
        try {
            return Long.parseLong(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
     */
    public static boolean isValidEmail(String email) {
        return email != null && 
               email.contains("@") && 
               email.contains(".") && 
               email.length() > 5;
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
     */
    public static String escapeHtml(String text) {
        if (text == null) {
            return "";
        }
        
        return text.replace("&", "&amp;")
                  .replace("<", "&lt;")
                  .replace(">", "&gt;")
                  .replace("\"", "&quot;")
                  .